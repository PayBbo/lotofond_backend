"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3421],{1755:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ Contacts)\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Contacts.vue?vue&type=template&id=73b7db97&scoped=true&\nvar render = function render() {\n  var _vm = this,\n      _c = _vm._self._c;\n\n  return _c("div", {\n    staticClass: "container bkt-page bkt-container"\n  }, [_c("h1", {\n    staticClass: "bkt-page__title"\n  }, [_vm._v("Контакты")]), _vm._v(" "), _c("bkt-modal", {\n    attrs: {\n      id: "details",\n      title: "Реквизиты Исполнителя",\n      modal_class: "bkt-filters-modal"\n    },\n    scopedSlots: _vm._u([{\n      key: "body",\n      fn: function fn() {\n        return [_c("div", [_c("p", [_c("strong", [_vm._v("ИП Валигурский С.Д.")])]), _vm._v(" "), _c("p", [_c("strong", [_vm._v("ИНН:")]), _vm._v(" 502982976506 "), _c("strong", [_vm._v("ОГРН:")]), _vm._v(" 318502900011975")]), _vm._v(" "), _c("p", [_vm._v("Российская Федерация, 141014, Московская область, г. Мытищи, ул. Трудовая, д. 32")]), _vm._v(" "), _c("p", [_c("strong", [_vm._v("Расчётный счёт:")]), _vm._v(" 40802810440000043320 в ПАО СБЕРБАНК, г. Москва")]), _vm._v(" "), _c("p", [_c("strong", [_vm._v("Кор. счёт:")]), _vm._v(" 30101810400000000225")]), _vm._v(" "), _c("p", [_c("strong", [_vm._v("БИК:")]), _vm._v(" 044525225")]), _vm._v(" "), _c("strong", [_c("a", {\n          staticClass: "bkt-text-primary",\n          attrs: {\n            href: _vm.contacts.email ? "mailto:" + _vm.contacts.email : ""\n          }\n        }, [_c("skeleton", [_vm._v("\\n                            " + _vm._s(_vm.contacts.email ? _vm.contacts.email : "") + "\\n                        ")])], 1)])])];\n      },\n      proxy: true\n    }, {\n      key: "footer",\n      fn: function fn() {\n        return [_c("button", {\n          staticClass: "bkt-button primary bkt-modal-save",\n          attrs: {\n            "data-bs-dismiss": "modal"\n          }\n        }, [_vm._v("\\n                    Закрыть\\n                ")])];\n      },\n      proxy: true\n    }])\n  }), _vm._v(" "), _c("div", {\n    staticClass: "bkt-form bkt-form_wide bkt-gap-row-large"\n  }, [_c("div", {\n    staticClass: "col-12 col-lg-4 bkt-form__offset-right"\n  }, [_c("div", {\n    staticClass: "bkt-wrapper-column bkt-gap-large"\n  }, [_c("div", {\n    staticClass: "bkt-card__row"\n  }, [_c("div", {\n    staticClass: "col-12 col-lg-10"\n  }, [_c("div", {\n    staticClass: "bkt-card__row-column"\n  }, [_c("h5", {\n    staticClass: "bkt-text-neutral-dark"\n  }, [_vm._v("\\n                                    e-mail\\n                                ")]), _vm._v(" "), _c("h4", {\n    staticClass: "bkt-card__title"\n  }, [_c("skeleton", [_vm._v(_vm._s(_vm.contacts.email ? _vm.contacts.email : ""))])], 1), _vm._v(" "), _vm.contacts.email ? _c("a", {\n    staticClass: "bkt-button primary bkt-text-white bkt-w-sm-100",\n    attrs: {\n      href: "mailto:" + _vm.contacts.email\n    }\n  }, [_vm._v("\\n                                    Написать\\n                                ")]) : _vm._e()])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-lg-2 d-none d-lg-block"\n  }, [_c("div", {\n    staticClass: "bkt-card__category ms-auto bkt-bg-yellow-lighter"\n  }, [_c("span", {\n    staticClass: "bkt-card__category-icon"\n  }, [_c("bkt-icon", {\n    attrs: {\n      name: "Email",\n      color: "yellow"\n    }\n  })], 1)])])]), _vm._v(" "), _c("button", {\n    staticClass: "bkt-button bkt-bg-white bkt-text-primary text-uppercase",\n    attrs: {\n      "data-bs-toggle": "modal",\n      "data-bs-target": "#details"\n    }\n  }, [_vm._v("\\n                        реквизиты Исполнителя\\n                    ")]), _vm._v(" "), _c("div", {\n    staticClass: "bkt-wrapper bkt-gap-small ms-lg-0"\n  }, [_c("a", {\n    staticClass: "bkt-button bkt-button-icon bkt-bg-white",\n    attrs: {\n      href: "#"\n    }\n  }, [_c("bkt-icon", {\n    attrs: {\n      name: "Vk",\n      color: "primary"\n    }\n  })], 1), _vm._v(" "), _c("a", {\n    staticClass: "bkt-button bkt-button-icon bkt-bg-white",\n    attrs: {\n      href: "#"\n    }\n  }, [_c("bkt-icon", {\n    attrs: {\n      name: "Instagram",\n      color: "gradient"\n    }\n  })], 1), _vm._v(" "), _c("a", {\n    staticClass: "bkt-button bkt-button-icon bkt-bg-white",\n    attrs: {\n      href: "#"\n    }\n  }, [_c("bkt-icon", {\n    attrs: {\n      name: "Telegram",\n      color: "blue"\n    }\n  })], 1), _vm._v(" "), _c("a", {\n    staticClass: "bkt-button bkt-button-icon bkt-bg-white",\n    attrs: {\n      href: "#"\n    }\n  }, [_c("bkt-icon", {\n    attrs: {\n      name: "Youtube",\n      color: "red"\n    }\n  })], 1)])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-lg-8"\n  }, [_c("div", {\n    staticClass: "bkt-wrapper-column bkt-gap-large"\n  }, [_c("div", {\n    staticClass: "bkt-card bkt-card__body"\n  }, [_c("ValidationObserver", {\n    ref: "observer",\n    staticClass: "bkt-form align-items-end wide",\n    attrs: {\n      tag: "div"\n    },\n    scopedSlots: _vm._u([{\n      key: "default",\n      fn: function fn(_ref) {\n        var invalid = _ref.invalid;\n        return [_c("div", {\n          staticClass: "col-12"\n        }, [_c("bkt-textarea", {\n          attrs: {\n            name: "message",\n            field_name: "вопроса",\n            rows: "6",\n            rules: "required",\n            label: "Задайте вопрос или опишите проблему",\n            label_class: "bkt-card__title",\n            no_group_item: ""\n          },\n          model: {\n            value: _vm.contact.question,\n            callback: function callback($$v) {\n              _vm.$set(_vm.contact, "question", $$v);\n            },\n            expression: "contact.question"\n          }\n        })], 1), _vm._v(" "), _c("div", {\n          staticClass: "col"\n        }, [_c("label", {\n          staticClass: "bkt-input__label bkt-form__label mt-0"\n        }, [_vm._v("куда вам прислать ответ")]), _vm._v(" "), _c("div", {\n          staticClass: "bkt-select__wrapper"\n        }, [_c("select", {\n          directives: [{\n            name: "model",\n            rawName: "v-model",\n            value: _vm.contact.communicationType,\n            expression: "contact.communicationType"\n          }],\n          staticClass: "form-select bkt-select w-100",\n          on: {\n            change: function change($event) {\n              var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {\n                return o.selected;\n              }).map(function (o) {\n                var val = "_value" in o ? o._value : o.value;\n                return val;\n              });\n\n              _vm.$set(_vm.contact, "communicationType", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);\n            }\n          }\n        }, [_c("option", {\n          attrs: {\n            value: "email"\n          }\n        }, [_vm._v("E-mail")]), _vm._v(" "), _c("option", {\n          attrs: {\n            value: "phone"\n          }\n        }, [_vm._v("Телефон")])])])]), _vm._v(" "), _c("div", {\n          staticClass: "col-12 col-lg-5"\n        }, [_vm.contact.communicationType == "email" ? _c("bkt-input", {\n          attrs: {\n            name: "email",\n            label: "ваш e-mail",\n            field_name: "E-mail",\n            rules: "required|email",\n            label_class: "bkt-form__label d-lg-none mt-0",\n            no_group_item: "",\n            errors_class: "d-lg-none"\n          },\n          model: {\n            value: _vm.email,\n            callback: function callback($$v) {\n              _vm.email = $$v;\n            },\n            expression: "email"\n          }\n        }) : _vm._e(), _vm._v(" "), _vm.contact.communicationType == "phone" ? _c("bkt-input", {\n          attrs: {\n            name: "phone",\n            type: "tel",\n            field_name: "Телефон",\n            label: "ваш номер телефона",\n            label_class: "bkt-form__label d-lg-none mt-0",\n            rules: "required|phone",\n            placeholder: "+7 495 000-00-00",\n            mask: ["+# ### ### ####", "+## ### ### ####", "+## ### #### ####"],\n            no_group_item: "",\n            errors_class: "d-lg-none"\n          },\n          model: {\n            value: _vm.phone,\n            callback: function callback($$v) {\n              _vm.phone = $$v;\n            },\n            expression: "phone"\n          }\n        }) : _vm._e()], 1), _vm._v(" "), _c("div", {\n          staticClass: "col"\n        }, [_c("button", {\n          staticClass: "bkt-button primary bkt-button_plump bkt-w-md-100 float-end",\n          attrs: {\n            disabled: invalid\n          },\n          on: {\n            click: _vm.submit\n          }\n        }, [_vm.loading ? _c("span", {\n          staticClass: "spinner-border spinner-border-sm",\n          attrs: {\n            role: "status",\n            "aria-hidden": "true"\n          }\n        }) : _vm._e(), _vm._v("\\n                                    Задать вопрос\\n                                ")])])];\n      }\n    }])\n  })], 1)])])])], 1);\n};\n\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/pages/Contacts.vue?vue&type=template&id=73b7db97&scoped=true&\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Contacts.vue?vue&type=script&lang=js&\n/* harmony default export */ const Contactsvue_type_script_lang_js_ = ({\n  name: "Contacts",\n  data: function data() {\n    return {\n      loading: false,\n      contact: {\n        question: \'\',\n        communicationType: \'email\',\n        communication: \'\'\n      },\n      phone: \'\',\n      email: \'\'\n    };\n  },\n  computed: {\n    contacts: function contacts() {\n      return this.$store.getters.main_contacts;\n    }\n  },\n  methods: {\n    submit: function submit() {\n      var _this = this;\n\n      this.loading = true;\n      axios.post(\'/api/send/contact\', this.contact).then(function (resp) {\n        _this.loading = false;\n\n        _this.$store.dispatch(\'sendNotification\', {\n          self: _this,\n          message: \'Вопрос успешно отправлен\'\n        });\n\n        _this.contact = {\n          question: \'\',\n          communicationType: \'email\',\n          communication: \'\'\n        };\n\n        _this.$nextTick(function () {\n          _this.$refs.observer.reset();\n        });\n      })["catch"](function (error) {\n        // this.$store.dispatch(\'sendNotification\', {self:this, type: \'error\'});\n        _this.loading = false;\n      });\n    },\n    subscribe: function subscribe() {}\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/pages/Contacts.vue?vue&type=script&lang=js&\n /* harmony default export */ const pages_Contactsvue_type_script_lang_js_ = (Contactsvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/pages/Contacts.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  pages_Contactsvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  "73b7db97",\n  null\n  \n)\n\n/* harmony default export */ const Contacts = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1755\n')}}]);