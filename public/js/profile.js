"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6845],{2545:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4015);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3645);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, "\\ninput[type=\\"file\\"][data-v-3402fcca] {\\n    opacity: 0;\\n    width: 100%;\\n    height: 0;\\n    position: absolute;\\n    cursor: pointer;\\n}\\n", "",{"version":3,"sources":["webpack://./resources/js/components/UploadFile.vue"],"names":[],"mappings":";AAmFA;IACA,UAAA;IACA,WAAA;IACA,SAAA;IACA,kBAAA;IACA,eAAA;AACA","sourcesContent":["<template>\\r\\n    <div class=\\"position-relative\\">\\r\\n        <input type=\\"file\\" ref=\\"upload\\" multiple v-on:change=\\"handleFile()\\"/>\\r\\n        <slot name=\\"upload_button\\">\\r\\n            <button :class=\\"upload_button_class\\" @click=\\"startUpload\\">\\r\\n                <slot name=\\"upload_button_inner\\">\\r\\n                    <bkt-icon name=\\"Clip\\" color=\\"primary\\" class=\\"bkt-button__icon\\"></bkt-icon>\\r\\n                    прикрепить файл\\r\\n                </slot>\\r\\n            </button>\\r\\n        </slot>\\r\\n    </div>\\r\\n</template>\\r\\n\\r\\n<script>\\r\\n    export default {\\r\\n        name: \\"UploadFile\\",\\r\\n        props: {\\r\\n            file: {},\\r\\n            upload_button_class: {\\r\\n                type: String,\\r\\n                default: \'bkt-button-link p-0\'\\r\\n            }\\r\\n        },\\r\\n        model: {\\r\\n            prop: \'file\',\\r\\n            event: \'change\'\\r\\n        },\\r\\n        data() {\\r\\n            return {\\r\\n                upload_files: []\\r\\n            }\\r\\n        },\\r\\n        methods: {\\r\\n            removeFile(key) {\\r\\n                this.$emit(\'removeFile\', this.upload_files[key]);\\r\\n                this.upload_files.splice(key, 1);\\r\\n                this.$emit(\'change\', this.upload_files);\\r\\n            },\\r\\n            handleFile() {\\r\\n                let uploadedFiles = this.$refs[\'upload\'].files;\\r\\n                for (let i = 0; i < uploadedFiles.length; i++) {\\r\\n                    if (/\\\\.(jpe?g|png|bmp|pdf|doc|docx)$/i.test(uploadedFiles[i].name)) {\\r\\n                        uploadedFiles[i].fileType = \'file\';\\r\\n                        if(/\\\\.(jpe?g|png|bmp)$/i.test(uploadedFiles[i].name))\\r\\n                        {\\r\\n                            uploadedFiles[i].fileType = \'image\';\\r\\n                        }\\r\\n                        uploadedFiles[i].file_size = this.formatBytes(uploadedFiles[i].size);\\r\\n                        this.upload_files.push(uploadedFiles[i]);\\r\\n                        this.$emit(\'change\', this.upload_files);\\r\\n                    }\\r\\n                }\\r\\n            },\\r\\n            startUpload() {\\r\\n                // this.$emit(\'start-upload\')\\r\\n                this.$refs.upload.click();\\r\\n            },\\r\\n            formatBytes(bytes, decimals = 2) {\\r\\n                if (bytes === 0) return \'0 Bytes\';\\r\\n\\r\\n                const k = 1024;\\r\\n                const dm = decimals < 0 ? 0 : decimals;\\r\\n                const sizes = [\'Bytes\', \'KB\', \'MB\', \'GB\', \'TB\', \'PB\', \'EB\', \'ZB\', \'YB\'];\\r\\n\\r\\n                const i = Math.floor(Math.log(bytes) / Math.log(k));\\r\\n\\r\\n                return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \' \' + sizes[i];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n<\/script>\\r\\n\\r\\n<style scoped>\\r\\n    input[type=\\"file\\"] {\\r\\n        opacity: 0;\\r\\n        width: 100%;\\r\\n        height: 0;\\r\\n        position: absolute;\\r\\n        cursor: pointer;\\r\\n    }\\r\\n</style>\\r\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjU0NS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDNEg7QUFDN0I7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLHdHQUFxQztBQUMvRjtBQUNBLG1GQUFtRixpQkFBaUIsa0JBQWtCLGdCQUFnQix5QkFBeUIsc0JBQXNCLEdBQUcsU0FBUyxxR0FBcUcsTUFBTSxVQUFVLFVBQVUsVUFBVSxXQUFXLFVBQVUsNG1CQUE0bUIscURBQXFELHdCQUF3Qix1Q0FBdUMsb0dBQW9HLGFBQWEscUJBQXFCLHlFQUF5RSxxQkFBcUIsd0JBQXdCLHFEQUFxRCxhQUFhLHVCQUF1QixpQ0FBaUMscUVBQXFFLHFEQUFxRCw0REFBNEQsaUJBQWlCLCtCQUErQixtRUFBbUUsb0NBQW9DLDBCQUEwQixNQUFNLDhGQUE4RiwrREFBK0QsK0dBQStHLG9FQUFvRSw2QkFBNkIsaUdBQWlHLHFFQUFxRSxvRUFBb0UseUJBQXlCLHFCQUFxQixpQkFBaUIsZ0NBQWdDLCtGQUErRixpQkFBaUIsbURBQW1ELHNEQUFzRCx1Q0FBdUMsMkRBQTJELDRGQUE0Riw0RUFBNEUsaUdBQWlHLGlCQUFpQixhQUFhLFNBQVMsaUVBQWlFLHVCQUF1Qix3QkFBd0Isc0JBQXNCLCtCQUErQiw0QkFBNEIsU0FBUyxtQ0FBbUM7QUFDaHpHO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9VcGxvYWRGaWxlLnZ1ZT9hZGY3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuaW5wdXRbdHlwZT1cXFwiZmlsZVxcXCJdW2RhdGEtdi0zNDAyZmNjYV0ge1xcbiAgICBvcGFjaXR5OiAwO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAwO1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvVXBsb2FkRmlsZS52dWVcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIjtBQW1GQTtJQUNBLFVBQUE7SUFDQSxXQUFBO0lBQ0EsU0FBQTtJQUNBLGtCQUFBO0lBQ0EsZUFBQTtBQUNBXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjx0ZW1wbGF0ZT5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwicG9zaXRpb24tcmVsYXRpdmVcXFwiPlxcclxcbiAgICAgICAgPGlucHV0IHR5cGU9XFxcImZpbGVcXFwiIHJlZj1cXFwidXBsb2FkXFxcIiBtdWx0aXBsZSB2LW9uOmNoYW5nZT1cXFwiaGFuZGxlRmlsZSgpXFxcIi8+XFxyXFxuICAgICAgICA8c2xvdCBuYW1lPVxcXCJ1cGxvYWRfYnV0dG9uXFxcIj5cXHJcXG4gICAgICAgICAgICA8YnV0dG9uIDpjbGFzcz1cXFwidXBsb2FkX2J1dHRvbl9jbGFzc1xcXCIgQGNsaWNrPVxcXCJzdGFydFVwbG9hZFxcXCI+XFxyXFxuICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XFxcInVwbG9hZF9idXR0b25faW5uZXJcXFwiPlxcclxcbiAgICAgICAgICAgICAgICAgICAgPGJrdC1pY29uIG5hbWU9XFxcIkNsaXBcXFwiIGNvbG9yPVxcXCJwcmltYXJ5XFxcIiBjbGFzcz1cXFwiYmt0LWJ1dHRvbl9faWNvblxcXCI+PC9ia3QtaWNvbj5cXHJcXG4gICAgICAgICAgICAgICAgICAgINC/0YDQuNC60YDQtdC/0LjRgtGMINGE0LDQudC7XFxyXFxuICAgICAgICAgICAgICAgIDwvc2xvdD5cXHJcXG4gICAgICAgICAgICA8L2J1dHRvbj5cXHJcXG4gICAgICAgIDwvc2xvdD5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC90ZW1wbGF0ZT5cXHJcXG5cXHJcXG48c2NyaXB0PlxcclxcbiAgICBleHBvcnQgZGVmYXVsdCB7XFxyXFxuICAgICAgICBuYW1lOiBcXFwiVXBsb2FkRmlsZVxcXCIsXFxyXFxuICAgICAgICBwcm9wczoge1xcclxcbiAgICAgICAgICAgIGZpbGU6IHt9LFxcclxcbiAgICAgICAgICAgIHVwbG9hZF9idXR0b25fY2xhc3M6IHtcXHJcXG4gICAgICAgICAgICAgICAgdHlwZTogU3RyaW5nLFxcclxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAnYmt0LWJ1dHRvbi1saW5rIHAtMCdcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9LFxcclxcbiAgICAgICAgbW9kZWw6IHtcXHJcXG4gICAgICAgICAgICBwcm9wOiAnZmlsZScsXFxyXFxuICAgICAgICAgICAgZXZlbnQ6ICdjaGFuZ2UnXFxyXFxuICAgICAgICB9LFxcclxcbiAgICAgICAgZGF0YSgpIHtcXHJcXG4gICAgICAgICAgICByZXR1cm4ge1xcclxcbiAgICAgICAgICAgICAgICB1cGxvYWRfZmlsZXM6IFtdXFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfSxcXHJcXG4gICAgICAgIG1ldGhvZHM6IHtcXHJcXG4gICAgICAgICAgICByZW1vdmVGaWxlKGtleSkge1xcclxcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdyZW1vdmVGaWxlJywgdGhpcy51cGxvYWRfZmlsZXNba2V5XSk7XFxyXFxuICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkX2ZpbGVzLnNwbGljZShrZXksIDEpO1xcclxcbiAgICAgICAgICAgICAgICB0aGlzLiRlbWl0KCdjaGFuZ2UnLCB0aGlzLnVwbG9hZF9maWxlcyk7XFxyXFxuICAgICAgICAgICAgfSxcXHJcXG4gICAgICAgICAgICBoYW5kbGVGaWxlKCkge1xcclxcbiAgICAgICAgICAgICAgICBsZXQgdXBsb2FkZWRGaWxlcyA9IHRoaXMuJHJlZnNbJ3VwbG9hZCddLmZpbGVzO1xcclxcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHVwbG9hZGVkRmlsZXMubGVuZ3RoOyBpKyspIHtcXHJcXG4gICAgICAgICAgICAgICAgICAgIGlmICgvXFxcXC4oanBlP2d8cG5nfGJtcHxwZGZ8ZG9jfGRvY3gpJC9pLnRlc3QodXBsb2FkZWRGaWxlc1tpXS5uYW1lKSkge1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZGVkRmlsZXNbaV0uZmlsZVR5cGUgPSAnZmlsZSc7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYoL1xcXFwuKGpwZT9nfHBuZ3xibXApJC9pLnRlc3QodXBsb2FkZWRGaWxlc1tpXS5uYW1lKSlcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB7XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZGVkRmlsZXNbaV0uZmlsZVR5cGUgPSAnaW1hZ2UnO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWRlZEZpbGVzW2ldLmZpbGVfc2l6ZSA9IHRoaXMuZm9ybWF0Qnl0ZXModXBsb2FkZWRGaWxlc1tpXS5zaXplKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwbG9hZF9maWxlcy5wdXNoKHVwbG9hZGVkRmlsZXNbaV0pO1xcclxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIHRoaXMudXBsb2FkX2ZpbGVzKTtcXHJcXG4gICAgICAgICAgICAgICAgICAgIH1cXHJcXG4gICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgIH0sXFxyXFxuICAgICAgICAgICAgc3RhcnRVcGxvYWQoKSB7XFxyXFxuICAgICAgICAgICAgICAgIC8vIHRoaXMuJGVtaXQoJ3N0YXJ0LXVwbG9hZCcpXFxyXFxuICAgICAgICAgICAgICAgIHRoaXMuJHJlZnMudXBsb2FkLmNsaWNrKCk7XFxyXFxuICAgICAgICAgICAgfSxcXHJcXG4gICAgICAgICAgICBmb3JtYXRCeXRlcyhieXRlcywgZGVjaW1hbHMgPSAyKSB7XFxyXFxuICAgICAgICAgICAgICAgIGlmIChieXRlcyA9PT0gMCkgcmV0dXJuICcwIEJ5dGVzJztcXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgY29uc3QgayA9IDEwMjQ7XFxyXFxuICAgICAgICAgICAgICAgIGNvbnN0IGRtID0gZGVjaW1hbHMgPCAwID8gMCA6IGRlY2ltYWxzO1xcclxcbiAgICAgICAgICAgICAgICBjb25zdCBzaXplcyA9IFsnQnl0ZXMnLCAnS0InLCAnTUInLCAnR0InLCAnVEInLCAnUEInLCAnRUInLCAnWkInLCAnWUInXTtcXHJcXG5cXHJcXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IE1hdGguZmxvb3IoTWF0aC5sb2coYnl0ZXMpIC8gTWF0aC5sb2coaykpO1xcclxcblxcclxcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdCgoYnl0ZXMgLyBNYXRoLnBvdyhrLCBpKSkudG9GaXhlZChkbSkpICsgJyAnICsgc2l6ZXNbaV07XFxyXFxuICAgICAgICAgICAgfVxcclxcbiAgICAgICAgfVxcclxcbiAgICB9XFxyXFxuPC9zY3JpcHQ+XFxyXFxuXFxyXFxuPHN0eWxlIHNjb3BlZD5cXHJcXG4gICAgaW5wdXRbdHlwZT1cXFwiZmlsZVxcXCJdIHtcXHJcXG4gICAgICAgIG9wYWNpdHk6IDA7XFxyXFxuICAgICAgICB3aWR0aDogMTAwJTtcXHJcXG4gICAgICAgIGhlaWdodDogMDtcXHJcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcXHJcXG4gICAgfVxcclxcbjwvc3R5bGU+XFxyXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2545\n')},757:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "Z": () => (/* binding */ Switch)\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Switch.vue?vue&type=template&id=46929c16&scoped=true&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("label", {\n    staticClass: "bkt-switch"\n  }, [_c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.model,\n      expression: "model"\n    }],\n    attrs: {\n      type: "checkbox",\n      disabled: _vm.disabled\n    },\n    domProps: {\n      checked: Array.isArray(_vm.model) ? _vm._i(_vm.model, null) > -1 : _vm.model\n    },\n    on: {\n      change: function change($event) {\n        var $$a = _vm.model,\n          $$el = $event.target,\n          $$c = $$el.checked ? true : false;\n        if (Array.isArray($$a)) {\n          var $$v = null,\n            $$i = _vm._i($$a, $$v);\n          if ($$el.checked) {\n            $$i < 0 && (_vm.model = $$a.concat([$$v]));\n          } else {\n            $$i > -1 && (_vm.model = $$a.slice(0, $$i).concat($$a.slice($$i + 1)));\n          }\n        } else {\n          _vm.model = $$c;\n        }\n      }\n    }\n  }), _vm._v(" "), _c("span", {\n    staticClass: "bkt-slider"\n  })]);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/components/Switch.vue?vue&type=template&id=46929c16&scoped=true&\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/Switch.vue?vue&type=script&lang=js&\n/* harmony default export */ const Switchvue_type_script_lang_js_ = ({\n  name: "BktSwitch",\n  props: {\n    value: {\n      type: [Boolean, Number],\n      "default": false\n    },\n    // name: {\n    //     type: String,\n    //     required: true,\n    // },\n    // label: {\n    //     type: String,\n    //     default: "",\n    // },\n    // rules: {\n    //     type: null,\n    //     default: "",\n    // },\n    // wrapper_class: {\n    //     type: String,\n    //     default: "",\n    // },\n    disabled: {\n      type: Boolean,\n      "default": false\n    }\n  },\n  // model: {\n  //     prop: \'value\',\n  //     event: \'input\'\n  // },\n  data: function data() {\n    return {\n      // model:false,\n    };\n  },\n  mounted: function mounted() {\n    // this.model = this.value;\n  },\n  computed: {\n    model: {\n      get: function get() {\n        return this.value;\n      },\n      set: function set(value) {\n        this.$emit("input", value);\n      }\n    }\n  },\n  methods: {\n    saveValue: function saveValue() {\n      this.$emit(\'input\', this.model);\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/components/Switch.vue?vue&type=script&lang=js&\n /* harmony default export */ const components_Switchvue_type_script_lang_js_ = (Switchvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/components/Switch.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  components_Switchvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  "46929c16",\n  null\n  \n)\n\n/* harmony default export */ const Switch = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///757\n')},1055:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Z\": () => (/* binding */ UploadFile)\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/UploadFile.vue?vue&type=template&id=3402fcca&scoped=true&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c(\"div\", {\n    staticClass: \"position-relative\"\n  }, [_c(\"input\", {\n    ref: \"upload\",\n    attrs: {\n      type: \"file\",\n      multiple: \"\"\n    },\n    on: {\n      change: function change($event) {\n        return _vm.handleFile();\n      }\n    }\n  }), _vm._v(\" \"), _vm._t(\"upload_button\", function () {\n    return [_c(\"button\", {\n      \"class\": _vm.upload_button_class,\n      on: {\n        click: _vm.startUpload\n      }\n    }, [_vm._t(\"upload_button_inner\", function () {\n      return [_c(\"bkt-icon\", {\n        staticClass: \"bkt-button__icon\",\n        attrs: {\n          name: \"Clip\",\n          color: \"primary\"\n        }\n      }), _vm._v(\"\\n                прикрепить файл\\n            \")];\n    })], 2)];\n  })], 2);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/components/UploadFile.vue?vue&type=template&id=3402fcca&scoped=true&\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/UploadFile.vue?vue&type=script&lang=js&\n/* harmony default export */ const UploadFilevue_type_script_lang_js_ = ({\n  name: \"UploadFile\",\n  props: {\n    file: {},\n    upload_button_class: {\n      type: String,\n      \"default\": 'bkt-button-link p-0'\n    }\n  },\n  model: {\n    prop: 'file',\n    event: 'change'\n  },\n  data: function data() {\n    return {\n      upload_files: []\n    };\n  },\n  methods: {\n    removeFile: function removeFile(key) {\n      this.$emit('removeFile', this.upload_files[key]);\n      this.upload_files.splice(key, 1);\n      this.$emit('change', this.upload_files);\n    },\n    handleFile: function handleFile() {\n      var uploadedFiles = this.$refs['upload'].files;\n      for (var i = 0; i < uploadedFiles.length; i++) {\n        if (/\\.(jpe?g|png|bmp|pdf|doc|docx)$/i.test(uploadedFiles[i].name)) {\n          uploadedFiles[i].fileType = 'file';\n          if (/\\.(jpe?g|png|bmp)$/i.test(uploadedFiles[i].name)) {\n            uploadedFiles[i].fileType = 'image';\n          }\n          uploadedFiles[i].file_size = this.formatBytes(uploadedFiles[i].size);\n          this.upload_files.push(uploadedFiles[i]);\n          this.$emit('change', this.upload_files);\n        }\n      }\n    },\n    startUpload: function startUpload() {\n      // this.$emit('start-upload')\n      this.$refs.upload.click();\n    },\n    formatBytes: function formatBytes(bytes) {\n      var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n      if (bytes === 0) return '0 Bytes';\n      var k = 1024;\n      var dm = decimals < 0 ? 0 : decimals;\n      var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n      var i = Math.floor(Math.log(bytes) / Math.log(k));\n      return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/components/UploadFile.vue?vue&type=script&lang=js&\n /* harmony default export */ const components_UploadFilevue_type_script_lang_js_ = (UploadFilevue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(3379);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/UploadFile.vue?vue&type=style&index=0&id=3402fcca&prod&scoped=true&lang=css&\nvar UploadFilevue_type_style_index_0_id_3402fcca_prod_scoped_true_lang_css_ = __webpack_require__(2545);\n;// CONCATENATED MODULE: ./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/components/UploadFile.vue?vue&type=style&index=0&id=3402fcca&prod&scoped=true&lang=css&\n\n            \n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = injectStylesIntoStyleTag_default()(UploadFilevue_type_style_index_0_id_3402fcca_prod_scoped_true_lang_css_/* default */.Z, options);\n\n\n\n/* harmony default export */ const components_UploadFilevue_type_style_index_0_id_3402fcca_prod_scoped_true_lang_css_ = (UploadFilevue_type_style_index_0_id_3402fcca_prod_scoped_true_lang_css_/* default.locals */.Z.locals || {});\n;// CONCATENATED MODULE: ./resources/js/components/UploadFile.vue?vue&type=style&index=0&id=3402fcca&prod&scoped=true&lang=css&\n\n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/components/UploadFile.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar component = (0,componentNormalizer/* default */.Z)(\n  components_UploadFilevue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"3402fcca\",\n  null\n  \n)\n\n/* harmony default export */ const UploadFile = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1055\n")},4160:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ Profile)\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Profile.vue?vue&type=template&id=346a9faa&scoped=true&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "container bkt-page bkt-profile bkt-container"\n  }, [_c("h1", {\n    staticClass: "bkt-page__title d-md-none"\n  }, [_vm._v("\\n        Профиль\\n        "), _vm.isLoggedIn ? _c("bkt-icon", {\n    staticClass: "ms-1",\n    attrs: {\n      name: "LogOut",\n      color: "red",\n      width: "16px",\n      height: "16px"\n    }\n  }) : _vm._e()], 1), _vm._v(" "), _vm.isLoggedIn && !_vm.user_loading ? _c("div", {\n    staticClass: "bkt-form wide bkt-profile-gap"\n  }, [_c("div", {\n    staticClass: "col-12 col-lg-3 bkt-form__offset-right"\n  }, [_c("div", {\n    staticClass: "bkt-wrapper-sm-column bkt-wrapper-column-reverse bkt-profile-gap"\n  }, [_c("div", {\n    staticClass: "bkt-card bkt-card__body bkt-sidebar"\n  }, [_c("ul", {\n    staticClass: "bkt-sidebar__links"\n  }, _vm._l(_vm.links, function (link) {\n    return _c("li", {\n      staticClass: "bkt-sidebar__link",\n      "class": [_vm.tab == link.code ? "bkt-bg-" + link.color + "-lighter" : ""],\n      on: {\n        click: function click($event) {\n          return _vm.navigate(link);\n        }\n      }\n    }, [_c("div", {\n      staticClass: "bkt-sidebar__link-icon",\n      "class": [_vm.tab == link.code ? "bkt-bg-" + link.color : "bkt-bg-" + link.color + "-lighter"]\n    }, [_c("bkt-icon", {\n      attrs: {\n        name: link.icon,\n        color: _vm.tab == link.code ? "white" : link.color\n      }\n    })], 1), _vm._v(" "), _c("div", {\n      staticClass: "bkt-sidebar__link-label"\n    }, [_vm._v(_vm._s(link.label))])]);\n  }), 0)]), _vm._v(" "), _c("div", {\n    staticClass: "bkt-profile-tariff-wrapper"\n  }, [_c("div", {\n    staticClass: "bkt-card bkt-bg-primary bkt-profile-tariff"\n  }, [_c("h5", {\n    staticClass: "d-sm-none me-auto"\n  }, [_vm._v(_vm._s(_vm.user ? _vm.user.name + " " + _vm.user.lastName : ""))]), _vm._v(" "), _c("div", {\n    staticClass: "bkt-wrapper-between bkt-wrapper-sm-column"\n  }, [_c("h6", {\n    staticClass: "bkt-card__subtitle"\n  }, [_vm._v("тарифный план")]), _vm._v(" "), _c("h5", {\n    staticClass: "bkt-card__title"\n  }, [_vm._v(_vm._s(_vm.user.tariff ? _vm.user.tariff.title : "Базовый"))])]), _vm._v(" "), _c("a", {\n    staticClass: "bkt-button bkt-tariff-button",\n    attrs: {\n      href: "/tariffs"\n    }\n  }, [_vm._v("\\n                            Сменить тариф\\n                        ")]), _vm._v(" "), _c("div", {\n    staticClass: "bkt-card bkt-card__background-figure-1"\n  }), _vm._v(" "), _c("div", {\n    staticClass: "bkt-card bkt-card__background-figure-2 bkt-bg-primary"\n  })])])])]), _vm._v(" "), _c("div", {\n    staticClass: "p-0 col-12 col-lg-9"\n  }, [_c(_vm.tab + "Tab", {\n    tag: "component"\n  })], 1)]) : _vm._e(), _vm._v(" "), !_vm.isLoggedIn && !_vm.user_loading ? _c("div", {\n    staticClass: "bkt-shadow-card bkt-shadow-card_primary"\n  }, [_vm._m(0)]) : _vm._e(), _vm._v(" "), _vm.user_loading ? _c("div", {\n    staticClass: "d-flex w-100 justify-content-center my-5"\n  }, [_c("div", {\n    staticClass: "spinner-border",\n    staticStyle: {\n      color: "#2953ff",\n      "border-width": "2px"\n    },\n    attrs: {\n      role: "status"\n    }\n  })]) : _vm._e()]);\n};\nvar staticRenderFns = [function () {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "bkt-shadow-card__inner bkt-gap-large"\n  }, [_c("h5", {\n    staticClass: "bkt-card__title bkt-text-white"\n  }, [_vm._v("Войдите или зарегистрируйтесь")]), _vm._v(" "), _c("button", {\n    staticClass: "bkt-button bkt-bg-white bkt-text-primary mx-auto",\n    staticStyle: {\n      "max-width": "320px"\n    },\n    attrs: {\n      "data-bs-toggle": "modal",\n      "data-bs-target": "#authModal"\n    }\n  }, [_vm._v("\\n                Вход и регистрация\\n            ")]), _vm._v(" "), _c("div", {\n    staticClass: "bkt-shadow-card__shadow-1"\n  }), _vm._v(" "), _c("div", {\n    staticClass: "bkt-shadow-card__shadow-2"\n  })]);\n}];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/pages/Profile.vue?vue&type=template&id=346a9faa&scoped=true&\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Profile/ProfileTab.vue?vue&type=template&id=6b36eb2a&scoped=true&\nvar ProfileTabvue_type_template_id_6b36eb2a_scoped_true_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "bkt-form wide bkt-gap-row-large bkt-profile-gap"\n  }, [_c("div", {\n    staticClass: "col-12 col-lg-6 bkt-form__offset-right"\n  }, [_c("div", {\n    staticClass: "bkt-card"\n  }, [_c("ValidationObserver", {\n    staticClass: "bkt-card__body bkt-gap-down-sm-row-large",\n    attrs: {\n      tag: "div"\n    },\n    scopedSlots: _vm._u([{\n      key: "default",\n      fn: function fn(_ref) {\n        var invalid = _ref.invalid;\n        return [_c("h3", {\n          staticClass: "bkt-card__title"\n        }, [_vm._v("Ваши данные")]), _vm._v(" "), _c("bkt-input", {\n          attrs: {\n            name: "lastName",\n            type: "text",\n            rules: "required|alpha|min:2",\n            label: "фамилия",\n            placeholder: "Иванов",\n            disabled: !_vm.edit_user_mode,\n            no_group_item: ""\n          },\n          model: {\n            value: _vm.edit_user.lastName,\n            callback: function callback($$v) {\n              _vm.$set(_vm.edit_user, "lastName", $$v);\n            },\n            expression: "edit_user.lastName"\n          }\n        }), _vm._v(" "), _c("bkt-input", {\n          attrs: {\n            name: "name",\n            type: "text",\n            rules: "required|alpha|min:2",\n            label: "имя",\n            placeholder: "Иван",\n            disabled: !_vm.edit_user_mode,\n            no_group_item: ""\n          },\n          model: {\n            value: _vm.edit_user.name,\n            callback: function callback($$v) {\n              _vm.$set(_vm.edit_user, "name", $$v);\n            },\n            expression: "edit_user.name"\n          }\n        }), _vm._v(" "), _c("bkt-input", {\n          attrs: {\n            name: "middleName",\n            type: "text",\n            rules: "alpha|min:2",\n            label: "отчество",\n            placeholder: "Петрович",\n            disabled: !_vm.edit_user_mode,\n            no_group_item: ""\n          },\n          model: {\n            value: _vm.edit_user.middleName,\n            callback: function callback($$v) {\n              _vm.$set(_vm.edit_user, "middleName", $$v);\n            },\n            expression: "edit_user.middleName"\n          }\n        }), _vm._v(" "), _c("div", {\n          staticClass: "bkt-card__footer bkt-wrapper-between"\n        }, [_vm.edit_user_mode ? _c("button", {\n          staticClass: "bkt-button bkt-button_delete",\n          attrs: {\n            type: "button",\n            disabled: _vm.loading\n          },\n          on: {\n            click: _vm.cancel\n          }\n        }, [_c("bkt-icon", {\n          attrs: {\n            name: "Cancel",\n            width: "22px",\n            height: "22px",\n            color: "red"\n          }\n        })], 1) : _vm._e(), _vm._v(" "), _vm.edit_user_mode ? _c("button", {\n          staticClass: "bkt-button bkt-button_save",\n          attrs: {\n            type: "button",\n            disabled: invalid || _vm.loading\n          },\n          on: {\n            click: _vm.save\n          }\n        }, [_vm.loading ? _c("span", {\n          staticClass: "spinner-border spinner-border-sm",\n          attrs: {\n            role: "status"\n          }\n        }) : _vm._e(), _vm._v("\\n                            Сохранить\\n                        ")]) : _vm._e(), _vm._v(" "), _c("button", {\n          directives: [{\n            name: "show",\n            rawName: "v-show",\n            value: !_vm.edit_user_mode,\n            expression: "!edit_user_mode"\n          }],\n          staticClass: "bkt-button next ms-auto",\n          attrs: {\n            type: "button",\n            disabled: invalid || _vm.loading\n          },\n          on: {\n            click: function click($event) {\n              _vm.edit_user_mode = true;\n            }\n          }\n        }, [_vm._v("\\n                            Редактировать\\n                            "), _c("bkt-icon", {\n          attrs: {\n            name: "ArrowDown"\n          }\n        })], 1)])];\n      }\n    }])\n  })], 1)]), _vm._v(" "), _c("div", {\n    staticClass: "px-0 col-12 col-lg-6"\n  }, [_c("div", {\n    staticClass: "bkt-card"\n  }, [_c("ValidationObserver", {\n    directives: [{\n      name: "show",\n      rawName: "v-show",\n      value: !_vm.edit_password_mode,\n      expression: "!edit_password_mode"\n    }],\n    ref: "change_password",\n    staticClass: "bkt-card__body bkt-gap-down-sm-row-large",\n    attrs: {\n      tag: "div"\n    },\n    scopedSlots: _vm._u([{\n      key: "default",\n      fn: function fn(_ref2) {\n        var invalid = _ref2.invalid;\n        return [_c("h3", {\n          staticClass: "bkt-card__title"\n        }, [_vm._v("Смена пароля")]), _vm._v(" "), _c("bkt-input", {\n          attrs: {\n            name: "old_password",\n            type: _vm.passwords_types.oldPassword,\n            label: "старый пароль",\n            rules: "required|min:8",\n            group_item_action: ""\n          },\n          on: {\n            "click-group-item": function clickGroupItem($event) {\n              return _vm.switchVisibility("oldPassword");\n            }\n          },\n          scopedSlots: _vm._u([{\n            key: "icon",\n            fn: function fn() {\n              return [_c("svg", {\n                attrs: {\n                  version: "1.1",\n                  xmlns: "http://www.w3.org/2000/svg",\n                  viewBox: "0 0 516.000000 404.000000",\n                  width: "100%",\n                  height: "18px"\n                }\n              }, [_c("g", {\n                attrs: {\n                  transform: "translate(0.000000,404.000000) scale(0.100000,-0.100000)",\n                  fill: "#2953ff",\n                  stroke: "none"\n                }\n              }, [_c("path", {\n                attrs: {\n                  d: "M2295 4020 c-138 -17 -272 -42 -402 -76 -652 -168 -1237 -609 -1667\\n                                    -1258 -98 -148 -159 -276 -193 -403 -24 -87 -27 -116 -27 -263 0 -147 3 -176\\n                                    27 -263 47 -177 161 -379 348 -619 352 -453 761 -767 1244 -956 322 -126 641\\n                                    -178 1025 -169 250 6 363 20 580 73 188 46 330 98 515 189 462 227 868 596\\n                                    1189 1079 98 148 159 276 193 403 24 87 27 116 27 263 0 147 -3 176 -27 263\\n                                    -34 127 -95 255 -193 403 -328 495 -744 869 -1217 1094 -226 108 -479 185\\n                                    -737 226 -121 19 -571 28 -685 14z m456 -461 c453 -36 855 -199 1224 -496 193\\n                                    -156 417 -405 568 -633 115 -173 147 -263 147 -410 0 -149 -31 -234 -146 -408\\n                                    -311 -466 -718 -811 -1169 -990 -429 -170 -932 -195 -1385 -68 -532 148 -1015\\n                                    520 -1374 1058 -115 174 -146 259 -146 408 0 149 31 234 146 408 395 593 934\\n                                    978 1534 1096 215 42 386 52 601 35z"\n                }\n              }), _vm._v(" "), _c("path", {\n                attrs: {\n                  d: "M2458 3100 c-790 -100 -1213 -962 -806 -1644 91 -153 247 -301 409\\n                                    -390 295 -162 667 -173 977 -30 208 95 389 267 500 474 141 262 166 593 65\\n                                    875 -107 298 -344 539 -638 650 -149 57 -360 84 -507 65z m322 -495 c183 -67\\n                                    316 -198 385 -385 25 -66 29 -89 29 -195 0 -85 -4 -135 -16 -171 -92 -288\\n                                    -344 -467 -633 -451 -250 15 -460 174 -551 417 -24 66 -28 89 -28 195 0 85 4\\n                                    135 16 171 56 176 175 316 332 391 53 26 82 36 171 57 11 3 65 3 120 1 77 -2\\n                                    117 -9 175 -30z"\n                }\n              })])])];\n            },\n            proxy: true\n          }], null, true),\n          model: {\n            value: _vm.passwords.oldPassword,\n            callback: function callback($$v) {\n              _vm.$set(_vm.passwords, "oldPassword", $$v);\n            },\n            expression: "passwords.oldPassword"\n          }\n        }), _vm._v(" "), _c("bkt-input", {\n          attrs: {\n            name: "password",\n            type: _vm.passwords_types.newPassword,\n            label: "новый пароль",\n            rules: "required|min:8",\n            group_item_action: ""\n          },\n          on: {\n            "click-group-item": function clickGroupItem($event) {\n              return _vm.switchVisibility("newPassword");\n            }\n          },\n          scopedSlots: _vm._u([{\n            key: "icon",\n            fn: function fn() {\n              return [_c("svg", {\n                attrs: {\n                  version: "1.1",\n                  xmlns: "http://www.w3.org/2000/svg",\n                  viewBox: "0 0 516.000000 404.000000",\n                  width: "100%",\n                  height: "18px"\n                }\n              }, [_c("g", {\n                attrs: {\n                  transform: "translate(0.000000,404.000000) scale(0.100000,-0.100000)",\n                  fill: "#2953ff",\n                  stroke: "none"\n                }\n              }, [_c("path", {\n                attrs: {\n                  d: "M2295 4020 c-138 -17 -272 -42 -402 -76 -652 -168 -1237 -609 -1667\\n                                    -1258 -98 -148 -159 -276 -193 -403 -24 -87 -27 -116 -27 -263 0 -147 3 -176\\n                                    27 -263 47 -177 161 -379 348 -619 352 -453 761 -767 1244 -956 322 -126 641\\n                                    -178 1025 -169 250 6 363 20 580 73 188 46 330 98 515 189 462 227 868 596\\n                                    1189 1079 98 148 159 276 193 403 24 87 27 116 27 263 0 147 -3 176 -27 263\\n                                    -34 127 -95 255 -193 403 -328 495 -744 869 -1217 1094 -226 108 -479 185\\n                                    -737 226 -121 19 -571 28 -685 14z m456 -461 c453 -36 855 -199 1224 -496 193\\n                                    -156 417 -405 568 -633 115 -173 147 -263 147 -410 0 -149 -31 -234 -146 -408\\n                                    -311 -466 -718 -811 -1169 -990 -429 -170 -932 -195 -1385 -68 -532 148 -1015\\n                                    520 -1374 1058 -115 174 -146 259 -146 408 0 149 31 234 146 408 395 593 934\\n                                    978 1534 1096 215 42 386 52 601 35z"\n                }\n              }), _vm._v(" "), _c("path", {\n                attrs: {\n                  d: "M2458 3100 c-790 -100 -1213 -962 -806 -1644 91 -153 247 -301 409\\n                                    -390 295 -162 667 -173 977 -30 208 95 389 267 500 474 141 262 166 593 65\\n                                    875 -107 298 -344 539 -638 650 -149 57 -360 84 -507 65z m322 -495 c183 -67\\n                                    316 -198 385 -385 25 -66 29 -89 29 -195 0 -85 -4 -135 -16 -171 -92 -288\\n                                    -344 -467 -633 -451 -250 15 -460 174 -551 417 -24 66 -28 89 -28 195 0 85 4\\n                                    135 16 171 56 176 175 316 332 391 53 26 82 36 171 57 11 3 65 3 120 1 77 -2\\n                                    117 -9 175 -30z"\n                }\n              })])])];\n            },\n            proxy: true\n          }], null, true),\n          model: {\n            value: _vm.passwords.newPassword,\n            callback: function callback($$v) {\n              _vm.$set(_vm.passwords, "newPassword", $$v);\n            },\n            expression: "passwords.newPassword"\n          }\n        }), _vm._v(" "), _c("bkt-input", {\n          attrs: {\n            name: "confirmation",\n            type: _vm.passwords_types.submitNewPassword,\n            label: "повторите новый пароль",\n            rules: "required|min:8|confirmed:password",\n            group_item_action: ""\n          },\n          on: {\n            "click-group-item": function clickGroupItem($event) {\n              return _vm.switchVisibility("submitNewPassword");\n            }\n          },\n          scopedSlots: _vm._u([{\n            key: "icon",\n            fn: function fn() {\n              return [_c("svg", {\n                attrs: {\n                  version: "1.1",\n                  xmlns: "http://www.w3.org/2000/svg",\n                  viewBox: "0 0 516.000000 404.000000",\n                  width: "100%",\n                  height: "18px"\n                }\n              }, [_c("g", {\n                attrs: {\n                  transform: "translate(0.000000,404.000000) scale(0.100000,-0.100000)",\n                  fill: "#2953ff",\n                  stroke: "none"\n                }\n              }, [_c("path", {\n                attrs: {\n                  d: "M2295 4020 c-138 -17 -272 -42 -402 -76 -652 -168 -1237 -609 -1667\\n                                    -1258 -98 -148 -159 -276 -193 -403 -24 -87 -27 -116 -27 -263 0 -147 3 -176\\n                                    27 -263 47 -177 161 -379 348 -619 352 -453 761 -767 1244 -956 322 -126 641\\n                                    -178 1025 -169 250 6 363 20 580 73 188 46 330 98 515 189 462 227 868 596\\n                                    1189 1079 98 148 159 276 193 403 24 87 27 116 27 263 0 147 -3 176 -27 263\\n                                    -34 127 -95 255 -193 403 -328 495 -744 869 -1217 1094 -226 108 -479 185\\n                                    -737 226 -121 19 -571 28 -685 14z m456 -461 c453 -36 855 -199 1224 -496 193\\n                                    -156 417 -405 568 -633 115 -173 147 -263 147 -410 0 -149 -31 -234 -146 -408\\n                                    -311 -466 -718 -811 -1169 -990 -429 -170 -932 -195 -1385 -68 -532 148 -1015\\n                                    520 -1374 1058 -115 174 -146 259 -146 408 0 149 31 234 146 408 395 593 934\\n                                    978 1534 1096 215 42 386 52 601 35z"\n                }\n              }), _vm._v(" "), _c("path", {\n                attrs: {\n                  d: "M2458 3100 c-790 -100 -1213 -962 -806 -1644 91 -153 247 -301 409\\n                                    -390 295 -162 667 -173 977 -30 208 95 389 267 500 474 141 262 166 593 65\\n                                    875 -107 298 -344 539 -638 650 -149 57 -360 84 -507 65z m322 -495 c183 -67\\n                                    316 -198 385 -385 25 -66 29 -89 29 -195 0 -85 -4 -135 -16 -171 -92 -288\\n                                    -344 -467 -633 -451 -250 15 -460 174 -551 417 -24 66 -28 89 -28 195 0 85 4\\n                                    135 16 171 56 176 175 316 332 391 53 26 82 36 171 57 11 3 65 3 120 1 77 -2\\n                                    117 -9 175 -30z"\n                }\n              })])])];\n            },\n            proxy: true\n          }], null, true),\n          model: {\n            value: _vm.passwords.submitNewPassword,\n            callback: function callback($$v) {\n              _vm.$set(_vm.passwords, "submitNewPassword", $$v);\n            },\n            expression: "passwords.submitNewPassword"\n          }\n        }), _vm._v(" "), _c("div", {\n          staticClass: "bkt-card__footer bkt-wrapper-between"\n        }, [_c("button", {\n          staticClass: "bkt-button next ms-auto",\n          attrs: {\n            type: "button",\n            disabled: invalid\n          },\n          on: {\n            click: function click($event) {\n              _vm.edit_password_mode = true;\n            }\n          }\n        }, [_vm._v("\\n                            Далее\\n                            "), _c("bkt-icon", {\n          attrs: {\n            name: "ArrowDown"\n          }\n        })], 1)])];\n      }\n    }])\n  }), _vm._v(" "), _c("ValidationObserver", {\n    directives: [{\n      name: "show",\n      rawName: "v-show",\n      value: _vm.edit_password_mode,\n      expression: "edit_password_mode"\n    }],\n    ref: "verify_password",\n    staticClass: "bkt-card__body bkt-gap-down-sm-row-large",\n    attrs: {\n      tag: "div"\n    },\n    scopedSlots: _vm._u([{\n      key: "default",\n      fn: function fn(_ref3) {\n        var invalid = _ref3.invalid;\n        return [_c("h3", {\n          staticClass: "bkt-card__title"\n        }, [_vm._v("Код подтверждения")]), _vm._v(" "), _c("bkt-select", {\n          staticClass: "w-100",\n          attrs: {\n            reduce: function reduce(item) {\n              return item.value;\n            },\n            option_label: "title",\n            name: "grantType",\n            options: _vm.grantTypes,\n            clearable: false,\n            label_class: "bkt-input__label",\n            label: "способ потверждения",\n            select_class: "w-100"\n          },\n          model: {\n            value: _vm.passwords.grantType,\n            callback: function callback($$v) {\n              _vm.$set(_vm.passwords, "grantType", $$v);\n            },\n            expression: "passwords.grantType"\n          }\n        }), _vm._v(" "), _vm.passwords.grantType === "email" ? _c("bkt-input", {\n          attrs: {\n            name: "edit_email",\n            type: "email",\n            label: "e-mail",\n            rules: "required",\n            placeholder: "pochta@gmail.com",\n            icon_name: "Email",\n            icon_color: "primary"\n          },\n          model: {\n            value: _vm.edit_user.email,\n            callback: function callback($$v) {\n              _vm.$set(_vm.edit_user, "email", $$v);\n            },\n            expression: "edit_user.email"\n          }\n        }) : _vm._e(), _vm._v(" "), _vm.passwords.grantType === "phone" ? _c("bkt-input", {\n          attrs: {\n            name: "edit_phone",\n            type: "tel",\n            label: "номер телефона",\n            rules: "required|phone",\n            placeholder: "+7 495 000-00-00",\n            icon_name: "Smartphone",\n            icon_color: "primary",\n            mask: ["+# ### ### ####", "+## ### ### ####", "+## ### #### ####"]\n          },\n          model: {\n            value: _vm.edit_user.phone,\n            callback: function callback($$v) {\n              _vm.$set(_vm.edit_user, "phone", $$v);\n            },\n            expression: "edit_user.phone"\n          }\n        }) : _vm._e(), _vm._v(" "), _c("bkt-input", {\n          attrs: {\n            name: "code",\n            type: "text",\n            label: "код",\n            rules: "required|digits:6",\n            mask: "######"\n          },\n          scopedSlots: _vm._u([{\n            key: "group-item-inner",\n            fn: function fn() {\n              return [_c("button", {\n                staticClass: "bkt-button primary bkt-button_code",\n                attrs: {\n                  disabled: _vm.password_loading || _vm.code_loading\n                },\n                on: {\n                  click: _vm.sendCode\n                }\n              }, [_vm.code_loading ? _c("span", {\n                staticClass: "spinner-border spinner-border-sm",\n                attrs: {\n                  role: "status"\n                }\n              }) : _vm._e(), _vm._v("\\n                                Выслать код\\n                            ")])];\n            },\n            proxy: true\n          }], null, true),\n          model: {\n            value: _vm.passwords.code,\n            callback: function callback($$v) {\n              _vm.$set(_vm.passwords, "code", $$v);\n            },\n            expression: "passwords.code"\n          }\n        }), _vm._v(" "), _c("div", {\n          staticClass: "bkt-card__footer bkt-wrapper-between"\n        }, [_c("button", {\n          staticClass: "bkt-button next me-auto",\n          attrs: {\n            type: "button"\n          },\n          on: {\n            click: function click($event) {\n              _vm.edit_password_mode = false;\n            }\n          }\n        }, [_c("bkt-icon", {\n          staticClass: "bkt-rotate-90",\n          attrs: {\n            name: "ArrowDown"\n          }\n        }), _vm._v("\\n                            Назад\\n                        ")], 1), _vm._v(" "), _vm.edit_password_mode ? _c("button", {\n          staticClass: "bkt-button primary bkt-button_save",\n          attrs: {\n            disabled: invalid || _vm.password_loading || _vm.code_loading\n          },\n          on: {\n            click: _vm.changePassword\n          }\n        }, [_vm._v("\\n                            Сохранить\\n                        ")]) : _vm._e()])];\n      }\n    }])\n  })], 1)]), _vm._v(" "), _c("div", {\n    staticClass: "col-12"\n  }, [_c("contacts-tab")], 1)]);\n};\nvar ProfileTabvue_type_template_id_6b36eb2a_scoped_true_staticRenderFns = [];\nProfileTabvue_type_template_id_6b36eb2a_scoped_true_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/pages/Profile/ProfileTab.vue?vue&type=template&id=6b36eb2a&scoped=true&\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Profile/ContactsTab.vue?vue&type=template&id=03c8bff2&scoped=true&\nvar ContactsTabvue_type_template_id_03c8bff2_scoped_true_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "bkt-wrapper-column bkt-gap-large bkt-profile-gap"\n  }, [_c("div", {\n    staticClass: "bkt-card bkt-card__body bkt-gap-row-medium"\n  }, [_c("h3", {\n    staticClass: "bkt-card__title"\n  }, [_vm._v("Ваша электронная почта")]), _vm._v(" "), _c("div", {\n    staticClass: "bkt-form bkt-gap-down-sm-row-medium align-items-end"\n  }, [_c("div", {\n    staticClass: "col-12 col-md-8"\n  }, [_c("bkt-input", {\n    attrs: {\n      name: "email",\n      type: "email",\n      rules: "required|email",\n      placeholder: "pochta@gmail.com",\n      icon_name: "Email",\n      icon_color: "primary",\n      disabled: "",\n      status: _vm.status.email,\n      status_class: "bkt-text-primary"\n    },\n    model: {\n      value: _vm.user.email,\n      callback: function callback($$v) {\n        _vm.$set(_vm.user, "email", $$v);\n      },\n      expression: "user.email"\n    }\n  })], 1), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-md-4"\n  }, [!_vm.status.email ? _c("button", {\n    staticClass: "bkt-button primary bkt-button_plump float-end bkt-w-down-sm-100",\n    on: {\n      click: function click($event) {\n        return _vm.editContact("email");\n      }\n    }\n  }, [_vm._v("\\n                    " + _vm._s(_vm.user.email ? "Изменить" : "Привязать") + "\\n                    " + _vm._s(_vm.user.email && _vm.status.email ? "Отменить изменение" : "") + "\\n                ")]) : _vm._e(), _vm._v(" "), _vm.status.email ? _c("button", {\n    staticClass: "bkt-button primary bkt-button_plump float-end bkt-w-down-sm-100",\n    attrs: {\n      disabled: _vm.email_change_loading\n    },\n    on: {\n      click: function click($event) {\n        return _vm.cancelChange("email");\n      }\n    }\n  }, [_vm.email_change_loading ? _c("span", {\n    staticClass: "spinner-border spinner-border-sm flex-shrink-0",\n    attrs: {\n      role: "status"\n    }\n  }) : _vm._e(), _vm._v("\\n                    Отменить изменение\\n                ")]) : _vm._e()])])]), _vm._v(" "), _c("div", {\n    staticClass: "bkt-card bkt-card__body bkt-gap-row-medium"\n  }, [_c("h3", {\n    staticClass: "bkt-card__title"\n  }, [_vm._v("Ваш номер телефона")]), _vm._v(" "), _c("div", {\n    staticClass: "bkt-form bkt-gap-down-sm-row-medium"\n  }, [_c("div", {\n    staticClass: "col-12 col-md-8"\n  }, [_c("bkt-input", {\n    attrs: {\n      name: "phone",\n      type: "tel",\n      rules: "required|phone",\n      placeholder: "+7 495 000-00-00",\n      icon_name: "Smartphone",\n      icon_color: "primary",\n      mask: ["+# ### ### ####", "+## ### ### ####", "+## ### #### ####"],\n      disabled: "",\n      status: _vm.status.phone,\n      status_class: "bkt-text-primary"\n    },\n    model: {\n      value: _vm.user.phone,\n      callback: function callback($$v) {\n        _vm.$set(_vm.user, "phone", $$v);\n      },\n      expression: "user.phone"\n    }\n  })], 1), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-md-4"\n  }, [!_vm.status.phone ? _c("button", {\n    staticClass: "bkt-button primary bkt-button_plump float-end bkt-w-down-sm-100",\n    on: {\n      click: function click($event) {\n        return _vm.editContact("phone");\n      }\n    }\n  }, [_vm._v("\\n                    " + _vm._s(_vm.user.phone ? "Изменить" : "Привязать") + "\\n                ")]) : _vm._e(), _vm._v(" "), _vm.status.phone ? _c("button", {\n    staticClass: "bkt-button primary bkt-button_plump float-end bkt-w-down-sm-100",\n    attrs: {\n      disabled: _vm.phone_change_loading\n    },\n    on: {\n      click: function click($event) {\n        return _vm.cancelChange("phone");\n      }\n    }\n  }, [_vm.phone_change_loading ? _c("span", {\n    staticClass: "spinner-border spinner-border-sm flex-shrink-0",\n    attrs: {\n      role: "status"\n    }\n  }) : _vm._e(), _vm._v("\\n                    Отменить изменение\\n                ")]) : _vm._e()])])]), _vm._v(" "), _c("bkt-edit-contact-modal", {\n    ref: "editContact"\n  })], 1);\n};\nvar ContactsTabvue_type_template_id_03c8bff2_scoped_true_staticRenderFns = [];\nContactsTabvue_type_template_id_03c8bff2_scoped_true_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/pages/Profile/ContactsTab.vue?vue&type=template&id=03c8bff2&scoped=true&\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Profile/EditContactModal.vue?vue&type=template&id=7c02177c&scoped=true&\nvar EditContactModalvue_type_template_id_7c02177c_scoped_true_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _vm.user ? _c("bkt-modal", {\n    ref: "editContactModal",\n    attrs: {\n      id: "editContactModal",\n      title: "Привязать контакт",\n      modal_class: "bkt-code-modal",\n      loading: _vm.loading\n    },\n    on: {\n      "close-modal": _vm.back\n    },\n    scopedSlots: _vm._u([{\n      key: "body",\n      fn: function fn(_ref) {\n        var invalid = _ref.invalid;\n        return [!_vm.code_mode ? [_vm.contact.grantType == "email" ? _c("bkt-input", {\n          key: "contact_email",\n          attrs: {\n            name: "contact_email",\n            type: "email",\n            label: "новая эл.почта",\n            field_name: "\'новая эл.почта\'",\n            rules: "required|email",\n            placeholder: "pochta@gmail.com",\n            no_group_item: ""\n          },\n          model: {\n            value: _vm.email,\n            callback: function callback($$v) {\n              _vm.email = $$v;\n            },\n            expression: "email"\n          }\n        }) : _vm._e(), _vm._v(" "), _vm.contact.grantType == "phone" ? _c("bkt-input", {\n          key: "contact_phone",\n          attrs: {\n            name: "contact_phone",\n            type: "tel",\n            label: "новый номер телефона",\n            field_name: "\'новый номер телефона\'",\n            rules: "required|phone",\n            placeholder: "+7 495 000-00-00",\n            mask: ["+# ### ### ####", "+## ### ### ####", "+## ### #### ####"],\n            masked: false,\n            no_group_item: ""\n          },\n          model: {\n            value: _vm.phone,\n            callback: function callback($$v) {\n              _vm.phone = $$v;\n            },\n            expression: "phone"\n          }\n        }) : _vm._e(), _vm._v(" "), _vm.user[_vm.contact.grantType] ? _c("div", {\n          staticClass: "bkt-wrapper-column"\n        }, [_c("label", {\n          staticClass: "bkt-input__label"\n        }, [_vm._v("\\n                    " + _vm._s(_vm.contact.grantType == "email" ? "доступ к старой электронной почте:" : "доступ к старому телефону:") + "\\n                ")]), _vm._v(" "), _c("div", {\n          staticClass: "d-flex bkt-gap"\n        }, [_c("bkt-checkbox", {\n          attrs: {\n            type: "radio",\n            name: "access",\n            label: "есть",\n            val: true\n          },\n          model: {\n            value: _vm.contact.haveAccessToOldCredentials,\n            callback: function callback($$v) {\n              _vm.$set(_vm.contact, "haveAccessToOldCredentials", $$v);\n            },\n            expression: "contact.haveAccessToOldCredentials"\n          }\n        }), _vm._v(" "), _c("bkt-checkbox", {\n          attrs: {\n            type: "radio",\n            name: "access1",\n            label: "нет",\n            val: false\n          },\n          model: {\n            value: _vm.contact.haveAccessToOldCredentials,\n            callback: function callback($$v) {\n              _vm.$set(_vm.contact, "haveAccessToOldCredentials", $$v);\n            },\n            expression: "contact.haveAccessToOldCredentials"\n          }\n        })], 1)]) : _vm._e()] : _vm._e(), _vm._v(" "), _vm.code_mode ? [_c("div", {\n          staticClass: "bkt-shadow-card",\n          "class": _vm.new_code ? "bkt-shadow-card_green" : "bkt-shadow-card_blue"\n        }, [_c("div", {\n          staticClass: "bkt-shadow-card__inner bkt-gap-large"\n        }, [_vm.contact.haveAccessToOldCredentials && !_vm.new_code ? _c("h5", {\n          staticClass: "bkt-card__title bkt-text-white"\n        }, [_vm._v("\\n                        Код подтверждения\\n                        " + _vm._s(_vm.contact.grantType == "email" ? "вашей старой электронной почты" : "вашего старого номера телефона") + "\\n                        был отправлен на " + _vm._s(_vm.contact.grantType == "email" ? _vm.edit_user.email : _vm.edit_user.phone) + ".\\n                    ")]) : _vm._e(), _vm._v(" "), _vm.contact.haveAccessToOldCredentials && _vm.new_code || _vm.no_contact ? _c("h5", {\n          staticClass: "bkt-card__title bkt-text-white"\n        }, [_vm._v("\\n                        Код подтверждения\\n                        " + _vm._s(_vm.contact.grantType == "email" ? "вашей новой электронной почты" : "вашего нового номера телефона") + "\\n                        был отправлен на " + _vm._s(_vm.contact.grantType == "email" ? _vm.email : _vm.phone) + ".\\n                    ")]) : _vm._e(), _vm._v(" "), _vm.no_contact ? _c("h5", {\n          staticClass: "bkt-card__title bkt-text-white"\n        }, [_vm._v("\\n                        После подтверждения операции изменения\\n                        " + _vm._s(_vm.contact.grantType == "email" ? "электронной почты" : "номера телефона") + "\\n                        вступят в силу через 14 дней.\\n                    ")]) : _vm._e(), _vm._v(" "), !_vm.contact.haveAccessToOldCredentials && _vm.contact.isOldCredentials ? _c("h5", {\n          staticClass: "bkt-card__title bkt-text-white"\n        }, [_vm._v("\\n                        Код подтверждения " + _vm._s(_vm.contact.grantType == "email" ? "электронной почты" : "номера телефона") + "\\n                        был отправлен на " + _vm._s(_vm.contact.grantType == "email" ? _vm.edit_user.phone : _vm.edit_user.email) + ".\\n                    ")]) : _vm._e(), _vm._v(" "), _c("div", {\n          staticClass: "bkt-shadow-card__shadow-1"\n        }), _vm._v(" "), _c("div", {\n          staticClass: "bkt-shadow-card__shadow-2"\n        })])]), _vm._v(" "), _c("bkt-input", {\n          attrs: {\n            name: "contact_code",\n            type: "text",\n            field_name: "код",\n            label: "код",\n            rules: "required|digits:6",\n            mask: "######"\n          },\n          scopedSlots: _vm._u([{\n            key: "group-item-inner",\n            fn: function fn() {\n              return [_c("button", {\n                staticClass: "bkt-button primary bkt-button_code",\n                attrs: {\n                  disabled: _vm.loading || _vm.code_loading\n                },\n                on: {\n                  click: function click($event) {\n                    return _vm.sendCode("repeat");\n                  }\n                }\n              }, [_vm.code_loading ? _c("span", {\n                staticClass: "spinner-border spinner-border-sm flex-shrink-0",\n                attrs: {\n                  role: "status"\n                }\n              }) : _vm._e(), _vm._v("\\n                        Выслать повторно\\n                    ")])];\n            },\n            proxy: true\n          }], null, true),\n          model: {\n            value: _vm.contact.code,\n            callback: function callback($$v) {\n              _vm.$set(_vm.contact, "code", $$v);\n            },\n            expression: "contact.code"\n          }\n        })] : _vm._e()];\n      }\n    }, {\n      key: "footer",\n      fn: function fn(_ref2) {\n        var invalid = _ref2.invalid;\n        return [!_vm.code_mode ? _c("button", {\n          staticClass: "bkt-button next ms-auto",\n          attrs: {\n            type: "button",\n            disabled: invalid || _vm.same_contact || _vm.loading || _vm.code_loading\n          },\n          on: {\n            click: _vm.sendCode\n          }\n        }, [_vm._v("\\n            Далее\\n            "), _c("bkt-icon", {\n          directives: [{\n            name: "show",\n            rawName: "v-show",\n            value: !_vm.loading && !_vm.code_loading,\n            expression: "!loading && !code_loading"\n          }],\n          attrs: {\n            name: "ArrowDown"\n          }\n        }), _vm._v(" "), _vm.loading || _vm.code_loading ? _c("span", {\n          staticClass: "spinner-border spinner-border-sm bkt-border-primary",\n          attrs: {\n            role: "status"\n          }\n        }) : _vm._e()], 1) : _vm._e(), _vm._v(" "), _vm.code_mode ? _c("button", {\n          staticClass: "bkt-button next me-auto",\n          attrs: {\n            type: "button",\n            disabled: _vm.loading || _vm.code_loading\n          },\n          on: {\n            click: _vm.back\n          }\n        }, [_c("bkt-icon", {\n          staticClass: "bkt-rotate-90",\n          attrs: {\n            name: "ArrowDown"\n          }\n        }), _vm._v("\\n            Назад\\n        ")], 1) : _vm._e(), _vm._v(" "), _vm.code_mode && !_vm.new_code && !_vm.no_contact ? _c("button", {\n          staticClass: "bkt-button next ms-auto",\n          attrs: {\n            type: "button",\n            disabled: invalid || _vm.loading || _vm.code_loading\n          },\n          on: {\n            click: _vm.verifyCode\n          }\n        }, [_vm._v("\\n            Далее\\n            "), _c("bkt-icon", {\n          directives: [{\n            name: "show",\n            rawName: "v-show",\n            value: !_vm.loading && !_vm.code_loading,\n            expression: "!loading && !code_loading"\n          }],\n          attrs: {\n            name: "ArrowDown"\n          }\n        }), _vm._v(" "), _vm.loading ? _c("span", {\n          staticClass: "spinner-border spinner-border-sm bkt-border-primary",\n          attrs: {\n            role: "status"\n          }\n        }) : _vm._e()], 1) : _vm._e(), _vm._v(" "), _vm.code_mode && _vm.new_code ? _c("button", {\n          staticClass: "bkt-button primary bkt-button_save",\n          attrs: {\n            disabled: invalid || _vm.loading || _vm.code_loading\n          },\n          on: {\n            click: _vm.verifyCode\n          }\n        }, [_vm.loading ? _c("span", {\n          staticClass: "spinner-border spinner-border-sm",\n          attrs: {\n            role: "status"\n          }\n        }) : _vm._e(), _vm._v("\\n            Сохранить\\n        ")]) : _vm._e(), _vm._v(" "), _vm.code_mode && _vm.no_contact ? _c("button", {\n          staticClass: "bkt-button primary bkt-button_save",\n          attrs: {\n            disabled: invalid || _vm.loading\n          },\n          on: {\n            click: _vm.verifyCode\n          }\n        }, [_vm.loading ? _c("span", {\n          staticClass: "spinner-border spinner-border-sm",\n          attrs: {\n            role: "status"\n          }\n        }) : _vm._e(), _vm._v("\\n            Подтвердить\\n        ")]) : _vm._e()];\n      }\n    }], null, false, 786282602)\n  }) : _vm._e();\n};\nvar EditContactModalvue_type_template_id_7c02177c_scoped_true_staticRenderFns = [];\nEditContactModalvue_type_template_id_7c02177c_scoped_true_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/pages/Profile/EditContactModal.vue?vue&type=template&id=7c02177c&scoped=true&\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Profile/EditContactModal.vue?vue&type=script&lang=js&\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n/* harmony default export */ const EditContactModalvue_type_script_lang_js_ = ({\n  name: "EditContactModal",\n  data: function data() {\n    return {\n      loading: false,\n      code_loading: false,\n      verify_loading: false,\n      contact: {\n        code: \'\',\n        grantType: "email",\n        haveAccessToOldCredentials: true,\n        isOldCredentials: true\n      },\n      email: \'\',\n      phone: \'\',\n      code_mode: false,\n      new_code: false,\n      edit_user: {}\n    };\n  },\n  computed: {\n    user: function user() {\n      return this.$store.getters.auth_user;\n    },\n    no_contact: function no_contact() {\n      if (!this.contact.haveAccessToOldCredentials) {\n        if (this.contact.grantType == \'email\') {\n          if (!this.user.phone) {\n            return true;\n          }\n        } else {\n          if (!this.user.email) {\n            return true;\n          }\n        }\n      }\n      return false;\n    },\n    same_contact: function same_contact() {\n      if (this.contact.grantType == \'phone\') {\n        if (this.user.phone === this.phone) {\n          return true;\n        }\n      } else {\n        if (this.user.email === this.email) {\n          return true;\n        }\n      }\n      return false;\n    },\n    mode: function mode() {\n      if (this.contact.haveAccessToOldCredentials && this.contact.isOldCredentials) {\n        return \'old\'; //verify_old\n      }\n\n      if (this.contact.haveAccessToOldCredentials && !this.contact.isOldCredentials) {\n        return \'new\'; //verify_new\n      }\n\n      if (!this.contact.haveAccessToOldCredentials && !this.contact.isOldCredentials) {\n        return \'no_contact\'; //14\n      }\n\n      if (!this.contact.haveAccessToOldCredentials && this.contact.isOldCredentials) {\n        return \'new_contact\'; //new_contact\n      }\n    }\n  },\n\n  methods: {\n    setType: function setType() {\n      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \'email\';\n      this.edit_user = JSON.parse(JSON.stringify(this.user));\n      this.contact.grantType = type;\n      this.code_mode = false;\n      this.new_code = false;\n      // this.email = this.edit_user.email;\n      // this.phone = this.edit_user.phone;\n      if (!this.edit_user[type]) {\n        this.contact.haveAccessToOldCredentials = false;\n        this.contact.isOldCredentials = true;\n      }\n      if (this.edit_user[type]) {\n        this.contact.haveAccessToOldCredentials = true;\n        this.contact.isOldCredentials = true;\n      }\n      if (!this.edit_user.email && !this.edit_user.phone) {\n        this.contact.haveAccessToOldCredentials = false;\n        this.contact.isOldCredentials = false;\n      }\n    },\n    sendCode: function sendCode(type) {\n      var _this = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // if(type ===\'repeat\') {\n              _this.code_loading = true;\n              // this.loading = true;\n              // }\n              if (!_this.contact.haveAccessToOldCredentials) {\n                if (_this.contact.grantType === \'email\' && _this.edit_user.email && !_this.edit_user.phone) {\n                  _this.contact.isOldCredentials = false;\n                }\n                if (_this.contact.grantType === \'phone\' && !_this.edit_user.email && _this.edit_user.phone) {\n                  _this.contact.isOldCredentials = false;\n                }\n              }\n              data = JSON.parse(JSON.stringify(_this.contact));\n              data[data.grantType] = _this[data.grantType];\n              // if(this.mode !== \'no_contact\') {\n              //     this.code_mode = true;\n              // }\n              if (_this.mode == \'old\') {\n                if (_this.contact.haveAccessToOldCredentials === false) {\n                  data[data.grantType] = _this.user[data.grantType];\n                }\n              }\n              if (_this.mode == \'new\') {\n                _this.new_code = true;\n              }\n              _context.next = 8;\n              return _this.$store.dispatch(\'getCredentialsCode\', data).then(function (resp) {\n                _this.code_loading = false;\n                _this.loading = false;\n                _this.code_mode = true;\n                if (type === \'repeat\') {\n                  _this.$store.dispatch(\'sendNotification\', {\n                    self: _this,\n                    message: \'Код подтверждения был отправлен повторно\'\n                  });\n                }\n                // if(this.mode == \'no_contact\' && type !== \'repeat\') {\n                //     this.verifyCode()\n                // }\n              })["catch"](function (err) {\n                _this.code_loading = false;\n                _this.loading = false;\n                _this.code_mode = false;\n                // this.$store.dispatch(\'sendNotification\',\n                //     {self: this, message:\'Ошибка\', type: \'error\'})\n              });\n            case 8:\n            case "end":\n              return _context.stop();\n          }\n        }, _callee);\n      }))();\n    },\n    verifyCode: function verifyCode() {\n      var _this2 = this;\n      this.loading = true;\n      var data = JSON.parse(JSON.stringify(this.contact));\n      if (this.mode !== \'no_contact\') {\n        this.code_mode = true;\n      }\n      data[data.grantType] = this[data.grantType];\n      if (this.mode == \'old\') {\n        data[data.grantType] = this.user[data.grantType];\n      }\n      this.$store.dispatch(\'verifyCredentialsCode\', data).then(function (resp) {\n        if (_this2.mode == \'old\') {\n          _this2.contact.code = \'\';\n          _this2.contact.haveAccessToOldCredentials = true;\n          _this2.contact.isOldCredentials = false;\n          _this2.sendCode().then(function (resp) {\n            _this2.new_code = true;\n          });\n        } else {\n          _this2.loading = false;\n          if (_this2.mode !== \'no_contact\') {\n            _this2.$store.dispatch(\'sendNotification\', {\n              self: _this2,\n              message: \'Ваш контакт успешно изменен\'\n            });\n            _this2.$store.dispatch(\'saveDataProperty\', {\n              module_key: \'auth\',\n              state_key: \'auth_user\',\n              key: data.grantType,\n              value: data[data.grantType]\n            }, {\n              root: true\n            });\n          } else {\n            _this2.$store.dispatch(\'sendNotification\', {\n              self: _this2,\n              message: \'Ваш контакт будет изменен через 14 дней\'\n            });\n            console.log(resp.data, resp, resp.data.changeCredentialsProcess);\n            if (resp.data.changeCredentialsProcess) {\n              _this2.$store.dispatch(\'saveDataProperty\', {\n                module_key: \'auth\',\n                state_key: \'auth_user\',\n                key: \'changeCredentialsProcess\',\n                value: resp.data.changeCredentialsProcess\n              }, {\n                root: true\n              });\n            }\n            console.log(_this2.user);\n          }\n          _this2.cancel();\n        }\n      })["catch"](function (err) {\n        _this2.loading = false;\n      });\n    },\n    back: function back() {\n      this.code_mode = false;\n      this.new_code = false;\n      this.contact.code = \'\';\n      this.$refs.editContactModal.resetForm();\n      this.setType(this.contact.grantType);\n    },\n    cancel: function cancel() {\n      this.back();\n      this.$store.commit(\'closeModal\', \'#editContactModal\');\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/pages/Profile/EditContactModal.vue?vue&type=script&lang=js&\n /* harmony default export */ const Profile_EditContactModalvue_type_script_lang_js_ = (EditContactModalvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/pages/Profile/EditContactModal.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  Profile_EditContactModalvue_type_script_lang_js_,\n  EditContactModalvue_type_template_id_7c02177c_scoped_true_render,\n  EditContactModalvue_type_template_id_7c02177c_scoped_true_staticRenderFns,\n  false,\n  null,\n  "7c02177c",\n  null\n  \n)\n\n/* harmony default export */ const EditContactModal = (component.exports);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Profile/ContactsTab.vue?vue&type=script&lang=js&\n\n/* harmony default export */ const ContactsTabvue_type_script_lang_js_ = ({\n  name: "ContactTab",\n  components: {\n    BktEditContactModal: EditContactModal\n  },\n  data: function data() {\n    return {\n      edit_user: {\n        email: "",\n        middle_name: \'\',\n        name: "",\n        phone: \'\',\n        lastName: ""\n      },\n      loading: false,\n      // status: {\n      //     email: \'\',\n      //     phone: \'\'\n      // },\n      email_change_loading: false,\n      phone_change_loading: false\n    };\n  },\n  mounted: function mounted() {\n    if (this.isLoggedIn) {\n      this.edit_user = JSON.parse(JSON.stringify(this.user));\n      if (this.edit_user.changeCredentialsProcess) {\n        // const start = this.$moment(this.edit_user.changeCredentialsProcess.dateOfChange);\n        // const end = this.$moment();\n        // let days = start.diff(end, "days");\n        // if (days>0)\n        // {\n        //     this.status[this.edit_user.changeCredentialsProcess.newValueType] = \'дней до изменения на \'\n        //         +this.edit_user.changeCredentialsProcess.newValue+\' : \'+days;\n        // }\n        this.status[this.edit_user.changeCredentialsProcess.newValueType] = \'изменится на \' + this.edit_user.changeCredentialsProcess.newValue + \' \' + this.$moment(this.edit_user.changeCredentialsProcess.dateOfChange).format(\'DD MMMM YYYY HH:mm\');\n      }\n    }\n  },\n  computed: {\n    user: function user() {\n      return this.$store.getters.auth_user;\n    },\n    isLoggedIn: function isLoggedIn() {\n      return this.$store.getters.isLoggedIn;\n    },\n    status: function status() {\n      var s = {\n        email: \'\',\n        phone: \'\'\n      };\n      if (this.user.changeCredentialsProcess) {\n        s[this.user.changeCredentialsProcess.newValueType] = \'изменится на \' + this.user.changeCredentialsProcess.newValue + \' \' + this.$moment(this.user.changeCredentialsProcess.dateOfChange).format(\'DD MMMM YYYY HH:mm\');\n      }\n      return s;\n    } // profile_user: {\n    //     get() {\n    //         return JSON.parse(JSON.stringify(this.user));\n    //     },\n    //     set(value) {\n    //         this.edit_user = value;\n    //     }\n    // },\n  },\n  methods: {\n    editContact: function editContact(type) {\n      this.$refs.editContact.setType(type);\n      this.$store.commit(\'openModal\', \'#editContactModal\');\n    },\n    cancelChange: function cancelChange(type) {\n      var _this = this;\n      this[type + \'_change_loading\'] = true;\n      this.$store.dispatch(\'deleteCredentialsProcess\', this.user.changeCredentialsProcess.changeCredentialsProcessId).then(function (resp) {\n        // this.edit_user.changeCredentialsProcess = null;\n        // this.status[type] = \'\';\n        _this.$store.dispatch(\'saveDataProperty\', {\n          module_key: \'auth\',\n          state_key: \'auth_user\',\n          key: \'changeCredentialsProcess\',\n          value: null\n        }, {\n          root: true\n        });\n        _this[type + \'_change_loading\'] = false;\n        _this.$store.dispatch(\'sendNotification\', {\n          message: \'Изменение успешно отменено\'\n        });\n      })["catch"](function (error) {\n        _this[type + \'_change_loading\'] = false;\n        _this.$store.dispatch(\'sendNotification\', {\n          message: \'Произошла ошибка\',\n          type: \'error\'\n        });\n      });\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/pages/Profile/ContactsTab.vue?vue&type=script&lang=js&\n /* harmony default export */ const Profile_ContactsTabvue_type_script_lang_js_ = (ContactsTabvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./resources/js/pages/Profile/ContactsTab.vue\n\n\n\n\n\n/* normalize component */\n;\nvar ContactsTab_component = (0,componentNormalizer/* default */.Z)(\n  Profile_ContactsTabvue_type_script_lang_js_,\n  ContactsTabvue_type_template_id_03c8bff2_scoped_true_render,\n  ContactsTabvue_type_template_id_03c8bff2_scoped_true_staticRenderFns,\n  false,\n  null,\n  "03c8bff2",\n  null\n  \n)\n\n/* harmony default export */ const ContactsTab = (ContactsTab_component.exports);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Profile/ProfileTab.vue?vue&type=script&lang=js&\n\n/* harmony default export */ const ProfileTabvue_type_script_lang_js_ = ({\n  name: "ProfileTab",\n  components: {\n    ContactsTab: ContactsTab\n  },\n  data: function data() {\n    return {\n      passwords: {\n        grantType: "email",\n        // email: "",\n        // phone: "",\n        newPassword: \'\',\n        oldPassword: \'\',\n        submitNewPassword: \'\',\n        code: \'\'\n      },\n      passwords_types: {\n        newPassword: \'password\',\n        oldPassword: \'password\',\n        submitNewPassword: \'password\'\n      },\n      code_loading: false,\n      // edit_user:null,\n      edit_user: {\n        email: "",\n        middle_name: \'\',\n        name: "",\n        phone: \'\',\n        lastName: ""\n      },\n      edit_user_mode: false,\n      loading: false,\n      password_loading: false,\n      edit_password_mode: false,\n      grantTypes: [{\n        title: \'Email\',\n        value: \'email\'\n      }, {\n        title: \'Телефон\',\n        value: \'phone\'\n      }]\n    };\n  },\n  mounted: function mounted() {\n    if (this.isLoggedIn) {\n      this.edit_user = JSON.parse(JSON.stringify(this.user));\n    }\n  },\n  computed: {\n    user: function user() {\n      return this.$store.getters.auth_user;\n    },\n    isLoggedIn: function isLoggedIn() {\n      return this.$store.getters.isLoggedIn;\n    } // profile_user: {\n    //     get() {\n    //         return JSON.parse(JSON.stringify(this.user));\n    //     },\n    //     set(value) {\n    //         this.edit_user = value;\n    //     }\n    // },\n  },\n  methods: {\n    sendCode: function sendCode() {\n      var _this = this;\n      var data = {};\n      data.grantType = this.passwords.grantType;\n      var message = \'\';\n      if (this.passwords.grantType === \'email\') {\n        data.email = this.edit_user.email;\n        message = \'На указанную почту отправлено письмо с кодом подтверждения\';\n      } else {\n        data.phone = this.edit_user.phone;\n        message = \'На указанный номер телефона отправлено смс с кодом подтверждения\';\n      }\n      this.code_loading = true;\n      this.$store.dispatch(\'getPasswordCode\', data).then(function (resp) {\n        _this.code_loading = false;\n        _this.$store.dispatch(\'sendNotification\', {\n          self: _this,\n          message: message\n        });\n      })["catch"](function (err) {\n        _this.code_loading = false;\n        // this.$store.dispatch(\'sendNotification\',\n        //     {self: this, message:\'Ошибка\', type: \'error\'})\n      });\n    },\n    changePassword: function changePassword() {\n      var _this2 = this;\n      this.password_loading = true;\n      var data = this.passwords;\n      if (this.passwords.grantType === \'email\') {\n        data.email = this.edit_user.email;\n      } else {\n        data.phone = this.edit_user.phone;\n      }\n      this.$store.dispatch(\'changePassword\', data).then(function (resp) {\n        _this2.password_loading = false;\n        _this2.$store.dispatch(\'sendNotification\', {\n          self: _this2,\n          message: \'Пароль успешно изменен\'\n        });\n        requestAnimationFrame(function () {\n          if (_this2.$refs.change_password) {\n            _this2.$refs.change_password.reset();\n          }\n          if (_this2.$refs.verify_password) {\n            _this2.$refs.verify_password.reset();\n          }\n        });\n        _this2.edit_password_mode = false;\n        _this2.edit_user = JSON.parse(JSON.stringify(_this2.user));\n        _this2.passwords = {\n          grantType: "email",\n          newPassword: \'\',\n          oldPassword: \'\',\n          submitNewPassword: \'\',\n          code: \'\'\n        };\n      })["catch"](function (err) {\n        _this2.password_loading = false;\n        // this.$store.dispatch(\'sendNotification\',\n        //     {self: this, message:\'Ошибка\', type: \'error\'})\n      });\n    },\n    save: function save() {\n      var _this3 = this;\n      this.loading = true;\n      this.$store.dispatch(\'updateAuthUser\', this.edit_user).then(function (resp) {\n        _this3.loading = false;\n        _this3.$store.dispatch(\'sendNotification\', {\n          self: _this3,\n          message: \'Ваши данные успешно обновлены\'\n        });\n        _this3.cancel();\n      })["catch"](function (error) {\n        _this3.loading = false;\n      });\n    },\n    cancel: function cancel() {\n      this.edit_user_mode = false;\n      this.edit_user = JSON.parse(JSON.stringify(this.user));\n    },\n    switchVisibility: function switchVisibility(type) {\n      this.passwords_types[type] = this.passwords_types[type] === "password" ? "text" : "password";\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/pages/Profile/ProfileTab.vue?vue&type=script&lang=js&\n /* harmony default export */ const Profile_ProfileTabvue_type_script_lang_js_ = (ProfileTabvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./resources/js/pages/Profile/ProfileTab.vue\n\n\n\n\n\n/* normalize component */\n;\nvar ProfileTab_component = (0,componentNormalizer/* default */.Z)(\n  Profile_ProfileTabvue_type_script_lang_js_,\n  ProfileTabvue_type_template_id_6b36eb2a_scoped_true_render,\n  ProfileTabvue_type_template_id_6b36eb2a_scoped_true_staticRenderFns,\n  false,\n  null,\n  "6b36eb2a",\n  null\n  \n)\n\n/* harmony default export */ const ProfileTab = (ProfileTab_component.exports);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Profile/AboutTab.vue?vue&type=template&id=3f8dd6a5&scoped=true&\nvar AboutTabvue_type_template_id_3f8dd6a5_scoped_true_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _vm._m(0);\n};\nvar AboutTabvue_type_template_id_3f8dd6a5_scoped_true_staticRenderFns = [function () {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "bkt-card"\n  }, [_c("div", {\n    staticClass: "bkt-card__body"\n  }, [_c("div", {\n    staticClass: "bkt-card__title"\n  }, [_vm._v("О сайте lotofond.ru")]), _vm._v(" "), _c("div", {\n    staticClass: "bkt-card__text text-justify"\n  }, [_c("p", [_vm._v("\\n                Мобильное приложение позволяет:")]), _vm._v(" "), _c("p", [_vm._v(" - получать и просматривать уведомления;")]), _vm._v(" "), _c("p", [_vm._v(" - иметь доступ к сведениям об исполнении обязательств по договорам;")]), _vm._v(" "), _c("p", [_vm._v(" - отслеживать текущее состояние задатка и задолженности;")]), _vm._v(" "), _c("p", [_vm._v(" - просматривать информацию по арбитражным делам.\\n            ")]), _vm._v(" "), _c("p", [_vm._v("\\n                Ключевые особенности:")]), _vm._v(" "), _c("p", [_vm._v("   - упрощенная авторизация по логину, паролю и sms-коду;")]), _vm._v(" "), _c("p", [_vm._v("   - удобный доступ к данным персонального раздела;")]), _vm._v(" "), _c("p", [_vm._v("   - push-уведомления о статусе задатка и задолженности;")]), _vm._v(" "), _c("p", [_vm._v("   - оперативная связь со структурными подразделениями биржи.\\n            ")])])])]);\n}];\nAboutTabvue_type_template_id_3f8dd6a5_scoped_true_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/pages/Profile/AboutTab.vue?vue&type=template&id=3f8dd6a5&scoped=true&\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Profile/AboutTab.vue?vue&type=script&lang=js&\n/* harmony default export */ const AboutTabvue_type_script_lang_js_ = ({\n  name: "AboutTab"\n});\n;// CONCATENATED MODULE: ./resources/js/pages/Profile/AboutTab.vue?vue&type=script&lang=js&\n /* harmony default export */ const Profile_AboutTabvue_type_script_lang_js_ = (AboutTabvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./resources/js/pages/Profile/AboutTab.vue\n\n\n\n\n\n/* normalize component */\n;\nvar AboutTab_component = (0,componentNormalizer/* default */.Z)(\n  Profile_AboutTabvue_type_script_lang_js_,\n  AboutTabvue_type_template_id_3f8dd6a5_scoped_true_render,\n  AboutTabvue_type_template_id_3f8dd6a5_scoped_true_staticRenderFns,\n  false,\n  null,\n  "3f8dd6a5",\n  null\n  \n)\n\n/* harmony default export */ const AboutTab = (AboutTab_component.exports);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Profile/HelpTab.vue?vue&type=template&id=43f77fe6&scoped=true&\nvar HelpTabvue_type_template_id_43f77fe6_scoped_true_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "bkt-wrapper-column"\n  }, _vm._l(_vm.help, function (item, index) {\n    return _c("bkt-collapse", {\n      key: index,\n      attrs: {\n        main_class: "bkt-card bkt-notifications-card",\n        collapse_button_class: "bkt-bg-white",\n        id: "question" + index,\n        loading: _vm.loading\n      },\n      scopedSlots: _vm._u([{\n        key: "title",\n        fn: function fn() {\n          return [_c("h4", {\n            staticClass: "bkt-card__title",\n            attrs: {\n              "data-bs-toggle": "collapse",\n              "data-bs-target": "#question" + index\n            }\n          }, [_vm._v("\\n               " + _vm._s(item.header) + "\\n            ")])];\n        },\n        proxy: true\n      }, {\n        key: "collapse",\n        fn: function fn() {\n          return [_c("p", {\n            staticClass: "bkt-card__text"\n          }, [_vm._v("\\n               " + _vm._s(item.value) + "\\n            ")])];\n        },\n        proxy: true\n      }], null, true)\n    });\n  }), 1);\n};\nvar HelpTabvue_type_template_id_43f77fe6_scoped_true_staticRenderFns = [];\nHelpTabvue_type_template_id_43f77fe6_scoped_true_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/pages/Profile/HelpTab.vue?vue&type=template&id=43f77fe6&scoped=true&\n\n// EXTERNAL MODULE: ./resources/js/components/Collapse.vue + 4 modules\nvar Collapse = __webpack_require__(3902);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Profile/HelpTab.vue?vue&type=script&lang=js&\n\n/* harmony default export */ const HelpTabvue_type_script_lang_js_ = ({\n  name: "HelpTab",\n  components: {\n    BktCollapse: Collapse/* default */.Z\n  },\n  data: function data() {\n    return {\n      loading: false\n    };\n  },\n  computed: {\n    help: function help() {\n      return this.$store.getters.help;\n    }\n  },\n  mounted: function mounted() {\n    if (this.help.length === 0 || !this.help) {\n      this.getHelp();\n    }\n  },\n  methods: {\n    getHelp: function getHelp() {\n      var _this = this;\n      this.loading = true;\n      this.$store.dispatch(\'getHelp\').then(function (resp) {\n        _this.loading = false;\n      })["catch"](function (error) {\n        _this.loading = false;\n      });\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/pages/Profile/HelpTab.vue?vue&type=script&lang=js&\n /* harmony default export */ const Profile_HelpTabvue_type_script_lang_js_ = (HelpTabvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./resources/js/pages/Profile/HelpTab.vue\n\n\n\n\n\n/* normalize component */\n;\nvar HelpTab_component = (0,componentNormalizer/* default */.Z)(\n  Profile_HelpTabvue_type_script_lang_js_,\n  HelpTabvue_type_template_id_43f77fe6_scoped_true_render,\n  HelpTabvue_type_template_id_43f77fe6_scoped_true_staticRenderFns,\n  false,\n  null,\n  "43f77fe6",\n  null\n  \n)\n\n/* harmony default export */ const HelpTab = (HelpTab_component.exports);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Profile/AskQuestionTab.vue?vue&type=template&id=6ef1392e&scoped=true&\nvar AskQuestionTabvue_type_template_id_6ef1392e_scoped_true_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("ValidationObserver", {\n    staticClass: "bkt-card bkt-card__body",\n    attrs: {\n      tag: "div"\n    },\n    scopedSlots: _vm._u([{\n      key: "default",\n      fn: function fn(_ref) {\n        var invalid = _ref.invalid;\n        return [_c("div", {\n          staticClass: "bkt-form align-items-baseline bkt-gap-down-sm-large"\n        }, [_c("div", {\n          staticClass: "col-4 ps-md-0 d-none d-md-block"\n        }, [_c("h5", {\n          staticClass: "bkt-form__label"\n        }, [_vm._v("ваш e-mail")])]), _vm._v(" "), _c("div", {\n          staticClass: "col-12 col-md-8 p-md-0"\n        }, [_c("bkt-input", {\n          attrs: {\n            name: "email",\n            type: "email",\n            label: "ваш e-mail",\n            rules: "required|email",\n            placeholder: "pochta@gmail.com",\n            label_class: "d-md-none",\n            no_group_item: ""\n          },\n          model: {\n            value: _vm.question.email,\n            callback: function callback($$v) {\n              _vm.$set(_vm.question, "email", $$v);\n            },\n            expression: "question.email"\n          }\n        })], 1), _vm._v(" "), _c("div", {\n          staticClass: "col-4 ps-md-0 d-none d-md-block"\n        }, [_c("h5", {\n          staticClass: "bkt-form__label"\n        }, [_vm._v("тема вопроса")])]), _vm._v(" "), _c("div", {\n          staticClass: "col-12 col-md-8 p-md-0"\n        }, [_c("bkt-input", {\n          attrs: {\n            name: "topic",\n            type: "text",\n            label: "тема вопроса",\n            rules: "required|max:255",\n            placeholder: "",\n            label_class: "d-md-none",\n            no_group_item: ""\n          },\n          model: {\n            value: _vm.question.topic,\n            callback: function callback($$v) {\n              _vm.$set(_vm.question, "topic", $$v);\n            },\n            expression: "question.topic"\n          }\n        })], 1), _vm._v(" "), _c("div", {\n          staticClass: "col-4 ps-md-0 d-none d-md-block"\n        }, [_c("h5", {\n          staticClass: "bkt-form__label"\n        }, [_vm._v("текст вопроса")])]), _vm._v(" "), _c("div", {\n          staticClass: "col-12 col-md-8 p-md-0"\n        }, [_c("bkt-textarea", {\n          attrs: {\n            name: "question",\n            type: "text",\n            label: "текст вопроса",\n            rules: "required|max:255",\n            placeholder: "",\n            label_class: "d-md-none",\n            no_group_item: ""\n          },\n          model: {\n            value: _vm.question.question,\n            callback: function callback($$v) {\n              _vm.$set(_vm.question, "question", $$v);\n            },\n            expression: "question.question"\n          }\n        })], 1), _vm._v(" "), _c("div", {\n          staticClass: "col-4 ps-md-0 d-none d-md-block"\n        }), _vm._v(" "), _c("div", {\n          staticClass: "col-12 col-md-8 p-md-0"\n        }, [_c("div", {\n          staticClass: "bkt-tag__list"\n        }, _vm._l(_vm.question.files, function (item, index) {\n          return _c("div", {\n            staticClass: "bkt-tag justify-content-between flex-fill"\n          }, [_c("span", {\n            staticClass: "bkt-text-truncate"\n          }, [_vm._v(_vm._s(item.name))]), _vm._v(" "), _c("h6", {\n            staticClass: "bkt-text-neutral"\n          }, [_vm._v(_vm._s(item.file_size))]), _vm._v(" "), _c("span", {\n            staticClass: "bkt-tag__icon bkt-cursor-pointer",\n            on: {\n              click: function click($event) {\n                return _vm.removeFile(index);\n              }\n            }\n          }, [_c("bkt-icon", {\n            attrs: {\n              name: "Cancel",\n              color: "red",\n              width: "12px",\n              height: "12px"\n            }\n          })], 1)]);\n        }), 0), _vm._v(" "), _c("div", {\n          staticClass: "bkt-card__footer bkt-wrapper-between bkt-gap-large"\n        }, [_c("bkt-upload-file", {\n          ref: "upload_file",\n          model: {\n            value: _vm.question.files,\n            callback: function callback($$v) {\n              _vm.$set(_vm.question, "files", $$v);\n            },\n            expression: "question.files"\n          }\n        }), _vm._v(" "), _c("button", {\n          staticClass: "bkt-button primary bkt-button_plump bkt-w-sm-100",\n          attrs: {\n            disabled: _vm.loading || invalid\n          },\n          on: {\n            click: _vm.sendApplication\n          }\n        }, [_vm.loading ? _c("span", {\n          staticClass: "spinner-border spinner-border-sm",\n          attrs: {\n            role: "status"\n          }\n        }) : _vm._e(), _vm._v("\\n                    Отправить\\n                ")])], 1)])])];\n      }\n    }])\n  });\n};\nvar AskQuestionTabvue_type_template_id_6ef1392e_scoped_true_staticRenderFns = [];\nAskQuestionTabvue_type_template_id_6ef1392e_scoped_true_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/pages/Profile/AskQuestionTab.vue?vue&type=template&id=6ef1392e&scoped=true&\n\n// EXTERNAL MODULE: ./resources/js/components/UploadFile.vue + 6 modules\nvar UploadFile = __webpack_require__(1055);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Profile/AskQuestionTab.vue?vue&type=script&lang=js&\n\n/* harmony default export */ const AskQuestionTabvue_type_script_lang_js_ = ({\n  name: "AskQuestion",\n  components: {\n    BktUploadFile: UploadFile/* default */.Z\n  },\n  data: function data() {\n    return {\n      question: {\n        email: "",\n        question: \'\',\n        topic: "",\n        files: []\n      },\n      loading: false,\n      new_email: false\n    };\n  },\n  computed: {\n    user: function user() {\n      return this.$store.getters.auth_user;\n    }\n  },\n  mounted: function mounted() {\n    this.question.email = this.user.email;\n    if (!this.user.email) {\n      this.new_email = true;\n    }\n  },\n  methods: {\n    removeFile: function removeFile(index) {\n      this.$refs.upload_file.removeFile(index);\n    },\n    sendApplication: function sendApplication() {\n      var _this = this;\n      this.loading = true;\n      var formData = new FormData();\n      formData.append(\'email\', this.question.email);\n      formData.append(\'question\', this.question.question);\n      formData.append(\'topic\', this.question.topic);\n      for (var i = 0; i < this.question.files.length; i++) {\n        formData.append("files[]", this.question.files[i]);\n      }\n      axios.post(\'/api/send/question\', formData, {\n        headers: {\n          \'Content-Type\': \'multipart/form-data\'\n        }\n      }).then(function (resp) {\n        _this.loading = false;\n        _this.$store.dispatch(\'sendNotification\', {\n          self: _this,\n          message: \'Вопрос успешно отправлен\'\n        });\n        _this.question = {\n          email: "",\n          question: \'\',\n          topic: "",\n          files: []\n        };\n        _this.question.email = _this.user.email;\n      })["catch"](function (error) {\n        _this.loading = false;\n      });\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/pages/Profile/AskQuestionTab.vue?vue&type=script&lang=js&\n /* harmony default export */ const Profile_AskQuestionTabvue_type_script_lang_js_ = (AskQuestionTabvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./resources/js/pages/Profile/AskQuestionTab.vue\n\n\n\n\n\n/* normalize component */\n;\nvar AskQuestionTab_component = (0,componentNormalizer/* default */.Z)(\n  Profile_AskQuestionTabvue_type_script_lang_js_,\n  AskQuestionTabvue_type_template_id_6ef1392e_scoped_true_render,\n  AskQuestionTabvue_type_template_id_6ef1392e_scoped_true_staticRenderFns,\n  false,\n  null,\n  "6ef1392e",\n  null\n  \n)\n\n/* harmony default export */ const AskQuestionTab = (AskQuestionTab_component.exports);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Profile/NotificationsTab.vue?vue&type=template&id=0dfee53a&scoped=true&\nvar NotificationsTabvue_type_template_id_0dfee53a_scoped_true_render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", {\n    staticClass: "bkt-wrapper-column"\n  }, [_c("div", {\n    staticClass: "bkt-card bkt-notifications-card"\n  }, [_c("div", {\n    staticClass: "bkt-wrapper-between align-items-center bkt-nowrap"\n  }, [_vm._m(0), _vm._v(" "), _c("bkt-switch", {\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsFromMonitoring,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications, "notificationsFromMonitoring", $$v);\n      },\n      expression: "notifications.notificationsFromMonitoring"\n    }\n  })], 1)]), _vm._v(" "), _c("div", {\n    staticClass: "bkt-card bkt-notifications-card"\n  }, [_c("div", {\n    staticClass: "bkt-wrapper-between align-items-center bkt-nowrap"\n  }, [_vm._m(1), _vm._v(" "), _c("bkt-switch", {\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsFromFavourite,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications, "notificationsFromFavourite", $$v);\n      },\n      expression: "notifications.notificationsFromFavourite"\n    }\n  })], 1), _vm._v(" "), _c("div", {\n    staticClass: "bkt-wrapper-column"\n  }, [_c("h6", {\n    staticClass: "bkt-card__title",\n    "class": {\n      "bkt-text-neutral-dark": !_vm.notifications.notificationsFromFavourite\n    }\n  }, [_vm._v("\\n                Начало приёма заявок\\n            ")]), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "не присылать",\n      val: 0,\n      name: "favouriteApplicationStart0",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteApplicationStart,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteApplicationStart", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteApplicationStart"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 1 день",\n      val: 1,\n      name: "favouriteApplicationStart1",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteApplicationStart,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteApplicationStart", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteApplicationStart"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 2 дня",\n      val: 2,\n      name: "favouriteApplicationStart2",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteApplicationStart,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteApplicationStart", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteApplicationStart"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 4 дня",\n      val: 4,\n      name: "favouriteApplicationStart3",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteApplicationStart,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteApplicationStart", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteApplicationStart"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 7 дней",\n      val: 7,\n      name: "favouriteApplicationStart4",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteApplicationStart,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteApplicationStart", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteApplicationStart"\n    }\n  }), _vm._v(" "), _c("h6", {\n    staticClass: "bkt-card__title",\n    "class": {\n      "bkt-text-neutral-dark": !_vm.notifications.notificationsFromFavourite\n    }\n  }, [_vm._v("\\n                Окончание приёма заявок\\n            ")]), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "не присылать",\n      val: 0,\n      name: "favouriteApplicationEnd1",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteApplicationEnd,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteApplicationEnd", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteApplicationEnd"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 1 день",\n      val: 1,\n      name: "favouriteApplicationEnd1",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteApplicationEnd,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteApplicationEnd", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteApplicationEnd"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 2 дня",\n      val: 2,\n      name: "favouriteApplicationEnd2",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteApplicationEnd,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteApplicationEnd", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteApplicationEnd"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 4 дня",\n      val: 4,\n      name: "favouriteApplicationEnd3",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteApplicationEnd,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteApplicationEnd", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteApplicationEnd"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 7 дней",\n      val: 7,\n      name: "favouriteApplicationEnd4",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteApplicationEnd,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteApplicationEnd", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteApplicationEnd"\n    }\n  }), _vm._v(" "), _c("h6", {\n    staticClass: "bkt-card__title",\n    "class": {\n      "bkt-text-neutral-dark": !_vm.notifications.notificationsFromFavourite\n    }\n  }, [_vm._v("\\n                Начало проведение торгов\\n            ")]), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "не присылать",\n      val: 0,\n      name: "favouriteEventStart1",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteEventStart,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteEventStart", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteEventStart"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 1 день",\n      val: 1,\n      name: "favouriteEventStart1",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteEventStart,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteEventStart", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteEventStart"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 2 дня",\n      val: 2,\n      name: "favouriteEventStart2",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteEventStart,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteEventStart", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteEventStart"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 4 дня",\n      val: 4,\n      name: "favouriteEventStart3",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteEventStart,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteEventStart", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteEventStart"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 7 дней",\n      val: 7,\n      name: "favouriteEventStart4",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteEventStart,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteEventStart", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteEventStart"\n    }\n  }), _vm._v(" "), _c("h6", {\n    staticClass: "bkt-card__title",\n    "class": {\n      "bkt-text-neutral-dark": !_vm.notifications.notificationsFromFavourite\n    }\n  }, [_vm._v("\\n                Окончание приёма заявок\\n            ")]), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "не присылать",\n      val: 0,\n      name: "favouriteEventEnd1",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteEventEnd,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteEventEnd", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteEventEnd"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 1 день",\n      val: 1,\n      name: "favouriteEventEnd1",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteEventEnd,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteEventEnd", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteEventEnd"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 2 дня",\n      val: 2,\n      name: "favouriteEventEnd2",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteEventEnd,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteEventEnd", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteEventEnd"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 4 дня",\n      val: 4,\n      name: "favouriteEventEnd3",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteEventEnd,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteEventEnd", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteEventEnd"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 7 дней",\n      val: 7,\n      name: "favouriteEventEnd4",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouriteEventEnd,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouriteEventEnd", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouriteEventEnd"\n    }\n  }), _vm._v(" "), _c("h6", {\n    staticClass: "bkt-card__title",\n    "class": {\n      "bkt-text-neutral-dark": !_vm.notifications.notificationsFromFavourite\n    }\n  }, [_vm._v("\\n                Новый этап снижения цены\\n            ")]), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "не присылать",\n      val: 0,\n      name: "favouritePriceReduction1",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouritePriceReduction,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouritePriceReduction", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouritePriceReduction"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 1 день",\n      val: 1,\n      name: "favouritePriceReduction1",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouritePriceReduction,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouritePriceReduction", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouritePriceReduction"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 2 дня",\n      val: 2,\n      name: "favouritePriceReduction2",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouritePriceReduction,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouritePriceReduction", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouritePriceReduction"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 4 дня",\n      val: 4,\n      name: "favouritePriceReduction3",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouritePriceReduction,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouritePriceReduction", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouritePriceReduction"\n    }\n  }), _vm._v(" "), _c("bkt-checkbox", {\n    attrs: {\n      label: "за 7 дней",\n      val: 7,\n      name: "favouritePriceReduction4",\n      type: "radio",\n      disabled: !_vm.notifications.notificationsFromFavourite || _vm.loading\n    },\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsSettings.favouritePriceReduction,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications.notificationsSettings, "favouritePriceReduction", $$v);\n      },\n      expression: "notifications.notificationsSettings.favouritePriceReduction"\n    }\n  })], 1)]), _vm._v(" "), _c("div", {\n    staticClass: "bkt-card bkt-notifications-card"\n  }, [_c("div", {\n    staticClass: "bkt-wrapper-between align-items-center bkt-nowrap"\n  }, [_vm._m(2), _vm._v(" "), _c("bkt-switch", {\n    on: {\n      input: _vm.save\n    },\n    model: {\n      value: _vm.notifications.notificationsToEmail,\n      callback: function callback($$v) {\n        _vm.$set(_vm.notifications, "notificationsToEmail", $$v);\n      },\n      expression: "notifications.notificationsToEmail"\n    }\n  })], 1)])]);\n};\nvar NotificationsTabvue_type_template_id_0dfee53a_scoped_true_staticRenderFns = [function () {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", [_c("div", {\n    staticClass: "bkt-card__title"\n  }, [_vm._v("Мониторинг")]), _vm._v(" "), _c("h5", {\n    staticClass: "bkt-card__subtitle"\n  }, [_vm._v("изменение лотов подобранных в разделе “Мониторинг”")])]);\n}, function () {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", [_c("div", {\n    staticClass: "bkt-card__title"\n  }, [_vm._v("Избранное")]), _vm._v(" "), _c("h5", {\n    staticClass: "bkt-card__subtitle"\n  }, [_vm._v("изменение лотов подобранных в разделе “Избранное”")])]);\n}, function () {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("div", [_c("div", {\n    staticClass: "bkt-card__title"\n  }, [_vm._v("Оповещения на эл.почту")]), _vm._v(" "), _c("h5", {\n    staticClass: "bkt-card__subtitle"\n  }, [_vm._v("присылать оповещения на Вашу электронную почту")])]);\n}];\nNotificationsTabvue_type_template_id_0dfee53a_scoped_true_render._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/pages/Profile/NotificationsTab.vue?vue&type=template&id=0dfee53a&scoped=true&\n\n// EXTERNAL MODULE: ./resources/js/components/Switch.vue + 4 modules\nvar Switch = __webpack_require__(757);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Profile/NotificationsTab.vue?vue&type=script&lang=js&\nfunction NotificationsTabvue_type_script_lang_js_typeof(obj) { "@babel/helpers - typeof"; return NotificationsTabvue_type_script_lang_js_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, NotificationsTabvue_type_script_lang_js_typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return NotificationsTabvue_type_script_lang_js_typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (NotificationsTabvue_type_script_lang_js_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (NotificationsTabvue_type_script_lang_js_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n/* harmony default export */ const NotificationsTabvue_type_script_lang_js_ = ({\n  name: "NotificationsTab",\n  components: {\n    BktSwitch: Switch/* default */.Z\n  },\n  data: function data() {\n    return {\n      notifications: {\n        notificationsFromFavourite: true,\n        notificationsFromMonitoring: true,\n        notificationsSettings: {\n          favouriteEventStart: 1,\n          favouriteEventEnd: 1,\n          favouriteApplicationStart: 1,\n          favouriteApplicationEnd: 1,\n          favouriteResult: 1,\n          favouritePriceReduction: 1\n        },\n        notificationsToEmail: false\n      },\n      loading: false\n    };\n  },\n  mounted: function mounted() {\n    if (this.isLoggedIn) {\n      // this.notifications = JSON.parse(JSON.stringify(this.user));\n      this.notifications.notificationsFromFavourite = this.user.notificationsFromFavourite;\n      this.notifications.notificationsFromMonitoring = this.user.notificationsFromMonitoring;\n      this.notifications.notificationsSettings = this.user.notificationsSettings;\n      this.notifications.notificationsToEmail = this.user.notificationsToEmail;\n    }\n  },\n  computed: {\n    user: function user() {\n      return this.$store.getters.auth_user;\n    },\n    isLoggedIn: function isLoggedIn() {\n      return this.$store.getters.isLoggedIn;\n    }\n  },\n  methods: {\n    save: function save() {\n      var _this = this;\n      this.loading = true;\n      var data = _objectSpread(_objectSpread({}, this.user), this.notifications);\n      this.$store.dispatch(\'saveNotificationsSettings\', this.notifications).then(function (resp) {\n        _this.loading = false;\n        _this.$store.commit(\'setAuthUser\', data);\n        // this.$store.dispatch(\'saveDataProperty\', {\n        //     module_key: \'auth\', state_key: \'auth_user\',\n        //     key: \'notificationsSettings\',\n        //     value: [this.favourites_paths[0]]\n        // }, {root: true});\n      })["catch"](function (error) {\n        _this.loading = false;\n      });\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/pages/Profile/NotificationsTab.vue?vue&type=script&lang=js&\n /* harmony default export */ const Profile_NotificationsTabvue_type_script_lang_js_ = (NotificationsTabvue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./resources/js/pages/Profile/NotificationsTab.vue\n\n\n\n\n\n/* normalize component */\n;\nvar NotificationsTab_component = (0,componentNormalizer/* default */.Z)(\n  Profile_NotificationsTabvue_type_script_lang_js_,\n  NotificationsTabvue_type_template_id_0dfee53a_scoped_true_render,\n  NotificationsTabvue_type_template_id_0dfee53a_scoped_true_staticRenderFns,\n  false,\n  null,\n  "0dfee53a",\n  null\n  \n)\n\n/* harmony default export */ const NotificationsTab = (NotificationsTab_component.exports);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Profile.vue?vue&type=script&lang=js&\n\n\n\n\n\n\n/* harmony default export */ const Profilevue_type_script_lang_js_ = ({\n  name: "Profile",\n  components: {\n    ProfileTab: ProfileTab,\n    AboutTab: AboutTab,\n    AskQuestionTab: AskQuestionTab,\n    ContactsTab: ContactsTab,\n    NotificationsTab: NotificationsTab,\n    HelpTab: HelpTab\n  },\n  data: function data() {\n    return {\n      passwords: {\n        password: \'\',\n        confirm_password: \'\',\n        old_password: \'\'\n      },\n      code_loading: false,\n      tab: \'Profile\',\n      links: [{\n        icon: \'User\',\n        code: "Profile",\n        label: "Профиль",\n        color: \'primary\'\n      }, {\n        icon: \'Bell\',\n        code: "Notifications",\n        label: "Уведомления",\n        color: \'green\'\n      }, {\n        icon: \'Information\',\n        code: "AskQuestion",\n        label: "Задать вопрос",\n        color: \'yellow\'\n      },\n      // {\n      //     icon: \'Briefcase\',\n      //     code: "Contacts",\n      //     label: "Контакты",\n      //     color: \'blue\',\n      // },\n      {\n        icon: \'Help\',\n        code: "Help",\n        label: "Помощь",\n        color: \'pink\'\n      }, {\n        icon: \'Alignment\',\n        code: "About",\n        label: "О сайте",\n        color: \'red\'\n      }, {\n        path: \'/calendar\',\n        icon: \'Date\',\n        code: "Calendar",\n        label: "Календарь",\n        color: \'blue\'\n      }]\n    };\n  },\n  computed: {\n    user: function user() {\n      return this.$store.getters.auth_user;\n    },\n    user_loading: function user_loading() {\n      return this.$store.getters.auth_user_loading;\n    },\n    isLoggedIn: function isLoggedIn() {\n      return this.$store.getters.isLoggedIn;\n    }\n  },\n  methods: {\n    navigate: function navigate(link) {\n      if (link.path) {\n        this.$router.push(link.path);\n      } else {\n        this.tab = link.code;\n      }\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/pages/Profile.vue?vue&type=script&lang=js&\n /* harmony default export */ const pages_Profilevue_type_script_lang_js_ = (Profilevue_type_script_lang_js_); \n;// CONCATENATED MODULE: ./resources/js/pages/Profile.vue\n\n\n\n\n\n/* normalize component */\n;\nvar Profile_component = (0,componentNormalizer/* default */.Z)(\n  pages_Profilevue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  "346a9faa",\n  null\n  \n)\n\n/* harmony default export */ const Profile = (Profile_component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4160\n')}}]);