"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[4158],{9538:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ Messages)\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Messages.vue?vue&type=template&id=8c0212ba&scoped=true&\nvar render = function render() {\n  var _vm = this,\n      _c = _vm._self._c;\n\n  return _c("div", {\n    staticClass: "bkt-messages bkt-page bkt-container"\n  }, [_c("h1", {\n    staticClass: "bkt-page__title"\n  }, [_vm._v("\\n        Сообщения\\n    ")]), _vm._v(" "), _c("div", {\n    staticClass: "bkt-content"\n  }, [_c("div", {\n    ref: "cardList",\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-12 col-lg-3"\n  }, [_c("div", {\n    staticClass: "bkt-history__chats"\n  }, [_c("ul", {\n    staticClass: "list-unstyled text-left pt-4 pb-4"\n  }, [_c("li", {\n    staticClass: "bkt-chat",\n    "class": {\n      "bkt-bg-primary-lighter": _vm.selectedType == "all"\n    },\n    attrs: {\n      id: "chat-1"\n    },\n    on: {\n      click: function click($event) {\n        return _vm.setType("all");\n      }\n    }\n  }, [_vm._v("\\n                            Все\\n                            "), _c("div", {\n    staticClass: "bkt-chat__num rounded-pill bkt-bg-primary bkt-text-neutral-light"\n  }, [_vm.notifications_count.all > 0 ? _c("span", {\n    staticClass: "p-2"\n  }, [_vm._v("\\n                                    " + _vm._s(_vm.notifications_count.all) + "\\n                                ")]) : _vm._e()])]), _vm._v(" "), _c("li", {\n    staticClass: "bkt-chat",\n    "class": {\n      "bkt-bg-green-lighter": _vm.selectedType == "platform"\n    },\n    attrs: {\n      id: "chat-2"\n    },\n    on: {\n      click: function click($event) {\n        return _vm.setType("platform");\n      }\n    }\n  }, [_c("div", {\n    staticClass: "bkt-chat__text"\n  }, [_c("bkt-icon", {\n    attrs: {\n      name: "Bell",\n      color: "green",\n      width: "15px",\n      height: "15px"\n    }\n  }), _vm._v("\\n                                Сообщения платформы\\n                            ")], 1), _vm._v(" "), _c("div", {\n    staticClass: "bkt-chat__num rounded-pill bkt-bg-green bkt-text-neutral-light"\n  }, [_vm.notifications_count.platform > 0 ? _c("span", {\n    staticClass: "p-2"\n  }, [_vm._v("\\n                                    " + _vm._s(_vm.notifications_count.platform) + "\\n                                ")]) : _vm._e()])]), _vm._v(" "), _c("li", {\n    staticClass: "bkt-chat",\n    "class": {\n      "bkt-bg-yellow-lighter": _vm.selectedType == "favourite"\n    },\n    attrs: {\n      id: "chat-3"\n    },\n    on: {\n      click: function click($event) {\n        return _vm.setType("favourite");\n      }\n    }\n  }, [_c("div", {\n    staticClass: "bkt-chat__text"\n  }, [_c("bkt-icon", {\n    attrs: {\n      name: "Star",\n      color: "yellow",\n      width: "15px",\n      height: "15px"\n    }\n  }), _vm._v("\\n                                Избранное\\n                            ")], 1), _vm._v(" "), _c("div", {\n    staticClass: "bkt-chat__num rounded-pill bkt-bg-yellow bkt-text-neutral-light"\n  }, [_vm.notifications_count.favourite > 0 ? _c("span", {\n    staticClass: "p-2"\n  }, [_vm._v("\\n                                    " + _vm._s(_vm.notifications_count.favourite) + "\\n                                ")]) : _vm._e()])]), _vm._v(" "), _c("li", {\n    staticClass: "bkt-chat",\n    "class": {\n      "bkt-bg-red-lighter": _vm.selectedType == "monitoring"\n    },\n    attrs: {\n      id: "chat-4"\n    },\n    on: {\n      click: function click($event) {\n        return _vm.setType("monitoring");\n      }\n    }\n  }, [_c("div", {\n    staticClass: "bkt-chat__text"\n  }, [_c("bkt-icon", {\n    attrs: {\n      name: "Target",\n      color: "red",\n      width: "15px",\n      height: "15px"\n    }\n  }), _vm._v("\\n                                Мониторинг\\n                            ")], 1), _vm._v(" "), _c("div", {\n    staticClass: "rounded-pill bkt-bg-red bkt-text-neutral-light"\n  }, [_vm.notifications_count.monitoring > 0 ? _c("span", {\n    staticClass: "p-2"\n  }, [_vm._v("\\n                                    " + _vm._s(_vm.notifications_count.monitoring) + "\\n                                ")]) : _vm._e()])])])])]), _vm._v(" "), _c("div", {\n    staticClass: "col-12 col-lg-9 bkt-gap-row-medium"\n  }, [_c("div", {\n    staticClass: "bkt-wrapper-column bkt-gap-row-medium"\n  }, [_c("div", {\n    directives: [{\n      name: "show",\n      rawName: "v-show",\n      value: !_vm.loading,\n      expression: "!loading"\n    }],\n    staticClass: "bkt-wrapper-column bkt-gap-mini"\n  }, _vm._l(_vm.items, function (message, index) {\n    return message ? _c("div", {\n      key: index,\n      staticClass: "bkt-message",\n      "class": {\n        "bkt-cursor-pointer": message.type !== "platform"\n      },\n      on: {\n        click: function click($event) {\n          return _vm.navigate(message);\n        }\n      }\n    }, [_c("bkt-icon", {\n      staticClass: "bkt-message__check",\n      attrs: {\n        name: "Check",\n        color: message.isSeen ? "primary" : "main-lighter",\n        width: "15px",\n        height: "15px"\n      }\n    }), _vm._v(" "), _c("div", {\n      staticClass: "d-md-none bkt-wrapper-between w-100"\n    }, [_c("h6", {\n      staticClass: "bkt-message__date"\n    }, [_vm._v("\\n                                    " + _vm._s(_vm._f("moment")(message.date, "D MMMM YYYY")) + " в " + _vm._s(_vm._f("moment")(message.date, "HH:mm")) + "\\n                                ")]), _vm._v(" "), _c("div", {\n      staticClass: "bkt-chat-content__info text-right"\n    }, [_c("div", {\n      staticClass: "bkt-message__type",\n      "class": {\n        "bkt-bg-red-lighter bkt-text-red": message.type == "monitoring",\n        "bkt-bg-yellow-lighter bkt-text-yellow": message.type == "favourite",\n        "bkt-bg-green-lighter bkt-text-green": message.type == "platform"\n      }\n    }, [_vm._v("\\n                                        " + _vm._s(message.type == "monitoring" ? "мониторинг" : "") + "\\n                                        " + _vm._s(message.type == "favourite" ? "избранное" : "") + "\\n                                        " + _vm._s(message.type == "platform" ? "сообщения платформы" : "") + "\\n                                    ")])])]), _vm._v(" "), _c("div", {\n      staticClass: "bkt-wrapper-column bkt-message__content"\n    }, [_c("div", {\n      staticClass: "bkt-wrapper bkt-nowrap me-auto ms-0"\n    }, [message.type == "favourite" ? _c("div", {\n      staticClass: "bkt-message__image-wrapper"\n    }, [(!message.dataFavourite.photos || message.dataFavourite.photos.length == 0) && message.dataFavourite.categories && message.dataFavourite.categories.length > 0 ? _c("bkt-card-image-category", {\n      attrs: {\n        no_multiple: true,\n        categories: message.dataFavourite.categories\n      }\n    }) : _vm._e(), _vm._v(" "), message.dataFavourite.photos && message.dataFavourite.photos.length > 0 ? _c("img", {\n      staticClass: "bkt-message__image",\n      attrs: {\n        src: message.dataFavourite.photos[0].preview,\n        alt: ""\n      }\n    }) : _vm._e()], 1) : _vm._e(), _vm._v(" "), _c("div", {\n      staticClass: "bkt-chat-content__text"\n    }, [message.type == "monitoring" && message.dataMonitoring ? _c("div", {\n      staticClass: "bkt-badge mx-0 mb-2",\n      "class": message.dataMonitoring.folderInfo.color ? "bkt-bg-" + message.dataMonitoring.folderInfo.color : "bkt-bg-primary"\n    }, [_vm._v("\\n                                            " + _vm._s(message.dataMonitoring.folderInfo.name) + "\\n                                        ")]) : _vm._e(), _vm._v(" "), message.type == "monitoring" ? _c("h5", {\n      staticClass: "bkt-message__text bkt-cursor-pointer"\n    }, [_vm._v("\\n                                            Появились новые лоты в мониторинге:\\n                                            " + _vm._s(message.dataMonitoring ? message.dataMonitoring.newLotCount : "0") + "\\n                                        ")]) : _vm._e(), _vm._v(" "), message.type == "platform" && message.dataPlatform ? _c("h6", {\n      staticClass: "bkt-message__title"\n    }, [_vm._v("\\n                                            " + _vm._s(message.dataPlatform.label) + "\\n                                        ")]) : _vm._e(), _vm._v(" "), message.type == "platform" ? _c("h5", {\n      staticClass: "bkt-message__text"\n    }, [_vm._v("\\n                                            " + _vm._s(message.dataPlatform ? message.dataPlatform.value : "") + "\\n                                        ")]) : _vm._e(), _vm._v(" "), message.type == "favourite" && message.dataFavourite ? _c("h6", {\n      staticClass: "bkt-message__title bkt-card__title bkt-text-truncate bkt-arrow-after bkt-cursor-pointer"\n    }, [_vm._v("\\n                                            " + _vm._s(message.dataFavourite.description) + "\\n                                        ")]) : _vm._e(), _vm._v(" "), message.type == "favourite" ? _c("h5", {\n      staticClass: "bkt-message__text"\n    }, [_vm._v("\\n                                            " + _vm._s(message.dataFavourite ? message.dataFavourite.detail : "") + "\\n                                        ")]) : _vm._e()])]), _vm._v(" "), _c("h6", {\n      staticClass: "d-none d-md-block bkt-message__date"\n    }, [_vm._v("\\n                                    " + _vm._s(_vm._f("moment")(message.date, "D MMMM YYYY")) + " в " + _vm._s(_vm._f("moment")(message.date, "HH:mm")) + "\\n                                ")])]), _vm._v(" "), _c("div", {\n      staticClass: "bkt-message__type d-none d-md-block",\n      "class": {\n        "bkt-bg-red-lighter bkt-text-red": message.type == "monitoring",\n        "bkt-bg-yellow-lighter bkt-text-yellow": message.type == "favourite",\n        "bkt-bg-green-lighter bkt-text-green": message.type == "platform"\n      }\n    }, [_vm._v("\\n                                " + _vm._s(message.type == "monitoring" ? "мониторинг" : "") + "\\n                                " + _vm._s(message.type == "favourite" ? "избранное" : "") + "\\n                                " + _vm._s(message.type == "platform" ? "сообщения платформы" : "") + "\\n                            ")])], 1) : _vm._e();\n  }), 0), _vm._v(" "), _c("div", {\n    directives: [{\n      name: "show",\n      rawName: "v-show",\n      value: _vm.loading || _vm.type_loading,\n      expression: "loading||type_loading"\n    }],\n    staticClass: "bkt-wrapper-column bkt-gap-mini"\n  }, _vm._l(20, function (message, index) {\n    return _c("div", {\n      key: index,\n      staticClass: "bkt-message"\n    }, [_c("skeleton", {\n      attrs: {\n        width: "15px",\n        height: "15px",\n        skeleton_class: "bkt-message__check"\n      }\n    }), _vm._v(" "), _c("div", {\n      staticClass: "d-md-none bkt-wrapper-between w-100"\n    }, [_c("skeleton", {\n      attrs: {\n        skeleton_class: "bkt-message__date mb-1",\n        height: "12px"\n      }\n    }), _vm._v(" "), _c("div", {\n      staticClass: "bkt-chat-content__info text-right"\n    }, [_c("skeleton", {\n      attrs: {\n        skeleton_class: "bkt-bkt-message__type",\n        width: "92px"\n      }\n    })], 1)], 1), _vm._v(" "), _c("div", {\n      staticClass: "bkt-wrapper-column bkt-message__content"\n    }, [_c("div", {\n      staticClass: "bkt-wrapper bkt-nowrap me-auto ms-0"\n    }, [_c("div", {\n      staticClass: "bkt-message__image-wrapper"\n    }, [_c("skeleton", {\n      attrs: {\n        skeleton_class: "bkt-message__image"\n      }\n    })], 1), _vm._v(" "), _c("div", {\n      staticClass: "bkt-chat-content__text"\n    }, [_c("skeleton", {\n      attrs: {\n        height: "14px",\n        width: "150px",\n        skeleton_class: "mb-1"\n      }\n    }), _vm._v(" "), _c("skeleton", {\n      attrs: {\n        height: "12px",\n        width: "60%"\n      }\n    })], 1)]), _vm._v(" "), _c("skeleton", {\n      attrs: {\n        height: "12px",\n        skeleton_class: "d-none d-md-block bkt-message__date"\n      }\n    })], 1), _vm._v(" "), _c("skeleton", {\n      attrs: {\n        skeleton_class: "bkt-message__type d-none d-md-block",\n        width: "92px"\n      }\n    })], 1);\n  }), 0), _vm._v(" "), _vm.pagination_data && !_vm.type_loading ? _c("bkt-pagination", {\n    attrs: {\n      limit: 1,\n      data: _vm.pagination_data,\n      extraControls: false\n    },\n    on: {\n      "change-page": _vm.changePage\n    }\n  }) : _vm._e()], 1)])])])]);\n};\n\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/pages/Messages.vue?vue&type=template&id=8c0212ba&scoped=true&\n\n// EXTERNAL MODULE: ./resources/js/components/CardImageCategory.vue + 4 modules\nvar CardImageCategory = __webpack_require__(7183);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/pages/Messages.vue?vue&type=script&lang=js&\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\n\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'throw\' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\n\n/* harmony default export */ const Messagesvue_type_script_lang_js_ = ({\n  name: "Messages",\n  components: {\n    BktCardImageCategory: CardImageCategory/* default */.Z\n  },\n  data: function data() {\n    return {\n      info_categories: [{\n        id: 1,\n        code: \'platform\',\n        title: \'сообщения платформы\',\n        color: \'green\'\n      }, {\n        id: 2,\n        code: \'favourite\',\n        title: \'избранное\',\n        color: \'yellow\'\n      }, {\n        id: 3,\n        code: \'monitoring\',\n        title: \'мониторинг\',\n        color: \'red\'\n      }],\n      selectedType: \'all\',\n      type_loading: false,\n      signal: null,\n      controller: null\n    };\n  },\n  created: function created() {\n    var page = 1;\n\n    if (sessionStorage.getItem(\'messages_page\')) {\n      page = sessionStorage.getItem(\'messages_page\');\n    }\n\n    this.getData(page);\n  },\n  computed: {\n    items: function items() {\n      return this.$store.getters.notifications;\n    },\n    pagination_data: function pagination_data() {\n      return this.$store.getters.notifications_pagination;\n    },\n    loading: function loading() {\n      return this.$store.getters.notifications_loading;\n    },\n    notifications_count: function notifications_count() {\n      return this.$store.getters.notifications_count;\n    }\n  },\n  methods: {\n    getData: function getData() {\n      var _arguments = arguments,\n          _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var page, type;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                page = _arguments.length > 0 && _arguments[0] !== undefined ? _arguments[0] : 1;\n                _this.controller = new AbortController();\n                _this.signal = _this.controller.signal;\n                type = _this.selectedType;\n\n                if (sessionStorage.getItem(\'messages_page_type\')) {\n                  type = sessionStorage.getItem(\'messages_page_type\');\n\n                  if (type != _this.selectedType) {\n                    _this.selectedType = type;\n                  }\n                }\n\n                sessionStorage.setItem(\'messages_page\', page + \'\');\n                _context.next = 8;\n                return _this.$store.dispatch(\'getNotifications\', {\n                  page: page,\n                  type: type,\n                  signal: _this.signal\n                });\n\n              case 8:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    setType: function setType(type) {\n      var _this2 = this;\n\n      // if (!this.loading) {\n      if (this.signal) {\n        this.controller.abort();\n      }\n\n      this.type_loading = true;\n      this.selectedType = type;\n      sessionStorage.setItem(\'messages_page_type\', type);\n      setTimeout(function () {\n        _this2.getData(1).then(function (resp) {\n          _this2.type_loading = false;\n        })["catch"](function (resp) {\n          _this2.type_loading = false;\n        });\n      }, 50); // }\n    },\n    changePage: function changePage(page) {\n      var _this3 = this;\n\n      if (this.signal) {\n        this.controller.abort();\n      }\n\n      setTimeout(function () {\n        _this3.getData(page).then(function () {\n          var el = _this3.$refs.cardList;\n\n          if (el) {\n            requestAnimationFrame(function () {\n              el.scrollIntoView({\n                block: \'start\',\n                scrollBehavior: \'smooth\'\n              });\n              requestAnimationFrame(function () {\n                el.scrollIntoView();\n              });\n            });\n          }\n        });\n      }, 50);\n    },\n    navigate: function navigate(message) {\n      if (message.type === \'monitoring\') {\n        sessionStorage.setItem(\'monitoring_path_id\', message.dataMonitoring.folderInfo.pathId);\n        sessionStorage.setItem(\'monitoring\' + message.dataMonitoring.folderInfo.pathId + \'_page\', \'1\');\n        this.$router.push(\'/monitoring\');\n      }\n\n      if (message.type === \'favourite\') {\n        this.$router.push(\'/lot/\' + message.dataFavourite.id);\n      } // this.$router.push(path);\n\n    }\n  }\n});\n;// CONCATENATED MODULE: ./resources/js/pages/Messages.vue?vue&type=script&lang=js&\n /* harmony default export */ const pages_Messagesvue_type_script_lang_js_ = (Messagesvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(1900);\n;// CONCATENATED MODULE: ./resources/js/pages/Messages.vue\n\n\n\n\n\n/* normalize component */\n;\nvar component = (0,componentNormalizer/* default */.Z)(\n  pages_Messagesvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  "8c0212ba",\n  null\n  \n)\n\n/* harmony default export */ const Messages = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9538\n')}}]);