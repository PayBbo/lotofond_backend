"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5605],{98095:(module,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(94015);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23645);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, "\\n.my-v-select[data-v-b923fd8a] {\\n    position: relative;\\n    flex: 1 1 auto;\\n    width: 1%;\\n    min-width: 0;\\n}\\n", "",{"version":3,"sources":["webpack://./resources/js/admin/users/AddUser.vue"],"names":[],"mappings":";AA4RA;IACA,kBAAA;IACA,cAAA;IACA,SAAA;IACA,YAAA;AACA","sourcesContent":["<template>\\n    <fragment>\\n        <div class=\\"content-header\\">\\n            <div class=\\"container-fluid\\">\\n                <div class=\\"row mb-2\\">\\n                    <div class=\\"col-sm-6\\">\\n                        <h1 class=\\"m-0\\">\\n                            {{ isEdit ? \'Редактирование данных пользователя \' : \'Добавление нового пользователя\' }}</h1>\\n                    </div>\\n                    <div class=\\"col-sm-6\\">\\n                        <ol class=\\"breadcrumb float-sm-right\\">\\n                            <li class=\\"breadcrumb-item\\">\\n                                <router-link to=\\"/admin/users\\"\\n                                             style=\\"color: #007bff; text-decoration: none; background-color: transparent;\\">\\n                                    Пользователи\\n                                </router-link>\\n                            </li>\\n                            <li class=\\"breadcrumb-item active\\">{{ isEdit ? \'Редактирование\' : \'Добавление\' }}</li>\\n                        </ol>\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n\\n        <section class=\\"content\\">\\n            <div class=\\"container-fluid\\">\\n                <div class=\\"row\\">\\n                    <div class=\\"col-md-12\\">\\n                        <div class=\\"card card-primary\\">\\n                            <div class=\\"card-body\\">\\n                                <div class=\\"form-group\\">\\n                                    <label>Имя пользователя</label>\\n                                    <input required name=\\"name\\" type=\\"text\\" class=\\"form-control\\" v-model=\\"item.name\\"\\n                                           placeholder=\\"Введите имя пользователя\\">\\n                                </div>\\n                                <div class=\\"form-group\\">\\n                                    <label>Фамилия пользователя</label>\\n                                    <input required name=\\"surname\\" type=\\"text\\" class=\\"form-control\\"\\n                                           v-model=\\"item.surname\\"\\n                                           placeholder=\\"Введите фамилию пользователя\\">\\n                                </div>\\n                                <div class=\\"form-group\\">\\n                                    <label>Отчество пользователя</label>\\n                                    <input name=\\"middleName\\" type=\\"text\\" class=\\"form-control\\" v-model=\\"item.middleName\\"\\n                                           placeholder=\\"Введите отчество пользователя\\">\\n                                </div>\\n                                <div class=\\"form-group\\">\\n                                    <label>Почта (обязательно, если не задан телефон)</label>\\n                                    <div class=\\"input-group\\">\\n                                        <div class=\\"input-group-prepend\\">\\n                                            <span class=\\"input-group-text\\"><i class=\\"fas fa-envelope\\"></i></span>\\n                                        </div>\\n                                        <input name=\\"email\\" type=\\"text\\" class=\\"form-control\\" v-model=\\"item.email\\"\\n                                               placeholder=\\"Введите почту пользователя\\">\\n                                    </div>\\n                                </div>\\n                                <div class=\\"form-group\\">\\n                                    <label>Телефон (обязательно, если не задана почта)</label>\\n                                    <div class=\\"input-group\\">\\n                                        <div class=\\"input-group-prepend\\">\\n                                            <span class=\\"input-group-text\\"><i class=\\"fa fa-phone\\"></i></span>\\n                                        </div>\\n                                        <input name=\\"phone\\" type=\\"tel\\" class=\\"form-control\\" v-model=\\"item.phone\\"\\n                                               v-mask=\\"[\'+# ### ### ####\',\'+## ### ### ####\', \'+## ### #### ####\',]\\"\\n                                               placeholder=\\"Введите телефон пользователя\\">\\n                                    </div>\\n                                </div>\\n                                <div class=\\"form-group\\" v-if=\\"!isEdit\\">\\n                                    <label>Пароль пользователя (не менее 8 символов)</label>\\n                                    <div class=\\"input-group\\">\\n                                        <div class=\\"input-group-prepend\\">\\n                                            <span class=\\"input-group-text\\"><i class=\\"fa fa-key\\"></i></span>\\n                                        </div>\\n                                        <input name=\\"password\\" type=\\"text\\" class=\\"form-control\\" v-model=\\"item.password\\"\\n                                               placeholder=\\"Введите пароль пользователя\\" required>\\n                                        <span class=\\"input-group-append\\">\\n                                        <button type=\\"button\\" class=\\"btn btn-info btn-flat\\"\\n                                                @click=\\"generatePassword\\">Сгенерировать</button>\\n                                    </span>\\n                                    </div>\\n\\n                                </div>\\n\\n                                <div class=\\"form-group\\" v-if=\\"!isEdit\\">\\n                                    <div class=\\"custom-control custom-switch\\">\\n                                        <input type=\\"checkbox\\" class=\\"custom-control-input\\"\\n                                               id=\\"notificationsFromFavourite\\"\\n                                               v-model=\\"item.notificationsFromFavourite\\">\\n                                        <label class=\\"custom-control-label\\" for=\\"notificationsFromFavourite\\">\\n                                            {{\\n                                                item.notificationsFromFavourite ? \'Уведомления от избранного активированы для пользователя\' :\\n                                                    \'Уведомления от избранного отключены для пользователя\'\\n                                            }}\\n                                        </label>\\n                                    </div>\\n                                </div>\\n\\n                                <div class=\\"form-group\\" v-if=\\"!isEdit\\">\\n                                    <div class=\\"custom-control custom-switch\\">\\n                                        <input type=\\"checkbox\\" class=\\"custom-control-input\\"\\n                                               id=\\"notificationsFromMonitoring\\"\\n                                               v-model=\\"item.notificationsFromMonitoring\\">\\n                                        <label class=\\"custom-control-label\\" for=\\"notificationsFromMonitoring\\">\\n                                            {{\\n                                                item.notificationsFromMonitoring ? \'Уведомления от мониторинга активированы для пользователя\' :\\n                                                    \'Уведомления от мониторинга отключены для пользователя\'\\n                                            }}\\n                                        </label>\\n                                    </div>\\n                                </div>\\n\\n                                <div class=\\"form-group\\" v-if=\\"!isEdit\\">\\n                                    <div class=\\"custom-control custom-switch\\">\\n                                        <input type=\\"checkbox\\" class=\\"custom-control-input\\" id=\\"notificationsToEmail\\"\\n                                               v-model=\\"item.notificationsToEmail\\">\\n                                        <label class=\\"custom-control-label\\" for=\\"notificationsToEmail\\">\\n                                            {{\\n                                                item.notificationsToEmail ? \'Уведомления на почту активированы для пользователя\' :\\n                                                    \'Уведомления на почту отключены для пользователя\'\\n                                            }}\\n                                        </label>\\n                                    </div>\\n                                </div>\\n\\n                                <div class=\\"form-group\\">\\n                                    <label>Выберите тариф для пользователя</label>\\n                                    <div class=\\"input-group\\">\\n                                        <div class=\\"input-group-prepend\\">\\n                                            <span class=\\"input-group-text\\"><i class=\\"fa fa-tags\\"></i></span>\\n                                        </div>\\n                                        <select class=\\"form-control custom-select rounded-0\\" v-model=\\"item.tariff\\">\\n                                            <option :value=\\"null\\">Выберите тариф для пользователя</option>\\n                                            <option v-for=\\"tariff in tariffs\\" :value=\\"tariff.id\\">{{\\n                                                    tariff.title\\n                                                }}\\n                                            </option>\\n                                        </select>\\n                                    </div>\\n                                </div>\\n\\n                                <div class=\\"form-group\\">\\n                                    <label>Выберите регион для пользователя</label>\\n                                    <div class=\\"input-group\\">\\n                                        <div class=\\"input-group-prepend\\">\\n                                            <span class=\\"input-group-text\\"><i class=\\"fa fa-location-arrow\\"></i></span>\\n                                        </div>\\n                                    <v-select\\n                                        class=\\"my-v-select\\"\\n                                        v-model=\\"item.region\\"\\n                                        :options=\\"regions\\"\\n                                    >\\n                                    </v-select>\\n                                    </div>\\n                                </div>\\n\\n                                <div class=\\"form-group\\">\\n                                    <label>Роли</label>\\n                                    <div class=\\"input-group\\">\\n                                        <div class=\\"input-group-prepend\\">\\n                                            <span class=\\"input-group-text\\"><i class=\\"fa fa-users\\"></i></span>\\n                                        </div>\\n                                        <v-select\\n                                            class=\\"my-v-select\\"\\n                                            multiple\\n                                            v-model=\\"item.roles\\"\\n                                            :options=\\"roles.map(role=>role.name)\\"\\n\\n                                        >\\n                                        </v-select>\\n                                    </div>\\n\\n                                </div>\\n\\n                                <button type=\\"submit\\" class=\\"btn btn-success float-right\\"\\n                                        @click=\\"isEdit ? updateData(item) : storeData(item)\\">Сохранить\\n                                </button>\\n                            </div>\\n                            \x3c!-- /.card-body --\x3e\\n                        </div>\\n                        \x3c!-- /.card --\x3e\\n                    </div>\\n                </div>\\n            </div>\\n        </section>\\n    </fragment>\\n</template>\\n\\n<script>\\nimport {mapActions, mapGetters} from \\"vuex\\";\\nimport axios from \\"axios\\";\\nimport {mask} from \'vue-the-mask\'\\nexport default {\\n    name: \\"AddUser\\",\\n    data() {\\n        return {\\n            roles: [],\\n            tariffs: [],\\n            regions: []\\n        }\\n    },\\n    directives:{mask},\\n    async created() {\\n        this.$store.commit(\'setCurrentRoute\', this.$route.path.replace(/(\\\\/*$)/, \\"\\"))\\n        if (this.isEdit) {\\n            await this.editItem()\\n        } else {\\n            this.$store.commit(\'setItem\',\\n                {\\n                    name: \'\', surname: \'\', middleName: \'\', email: null, region: null,\\n                    phone: null, password: \'\', notificationsFromFavourite: true, notificationsFromMonitoring: true,\\n                    notificationsToEmail: true, roles: [\'user\'], tariff: null\\n                }\\n            )\\n        }\\n        await this.getRoles()\\n        await this.getTariffs()\\n        await this.getRegions()\\n    },\\n    computed: {\\n        ...mapGetters([\'item\', \'types\']),\\n        isEdit() {\\n            return !this.$route.path.includes(\'add\')\\n        }\\n    },\\n    methods: {\\n        ...mapActions([\'editItem\', \'updateData\', \'addData\']),\\n        storeData(item) {\\n            this.addData(item)\\n\\n        },\\n        generatePassword() {\\n            let length = 8,\\n                charset = \\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\",\\n                retVal = \\"\\";\\n            for (let i = 0, n = charset.length; i < length; ++i) {\\n                retVal += charset.charAt(Math.floor(Math.random() * n));\\n            }\\n            this.item.password = retVal;\\n        },\\n        async getRoles() {\\n            await axios({\\n                method: \'get\',\\n                url: \'/api/admin/roles\',\\n                data: {},\\n            })\\n                .then((response) => {\\n                    this.roles = response.data.data\\n                })\\n                .catch((error) => {\\n                    console.log(error);\\n                });\\n        },\\n        async getTariffs() {\\n            await axios({\\n                method: \'get\',\\n                url: \'/api/admin/tariffs\',\\n                data: {},\\n            })\\n                .then((response) => {\\n                    this.tariffs = response.data.data\\n                })\\n                .catch((error) => {\\n                    console.log(error);\\n                });\\n        },\\n        async getRegions() {\\n            await axios({\\n                method: \'get\',\\n                url: \'/api/admin/regions\',\\n                data: {},\\n            })\\n                .then((response) => {\\n                    this.regions = response.data\\n                })\\n                .catch((error) => {\\n                    console.log(error);\\n                });\\n        }\\n    }\\n\\n}\\n<\/script>\\n\\n<style scoped>\\n.my-v-select {\\n    position: relative;\\n    flex: 1 1 auto;\\n    width: 1%;\\n    min-width: 0;\\n}\\n</style>\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///98095\n')},34858:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": () => (/* binding */ AddUser)\n});\n\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/admin/users/AddUser.vue?vue&type=template&id=b923fd8a&scoped=true&\nvar render = function render() {\n  var _vm = this,\n    _c = _vm._self._c;\n  return _c("fragment", [_c("div", {\n    staticClass: "content-header"\n  }, [_c("div", {\n    staticClass: "container-fluid"\n  }, [_c("div", {\n    staticClass: "row mb-2"\n  }, [_c("div", {\n    staticClass: "col-sm-6"\n  }, [_c("h1", {\n    staticClass: "m-0"\n  }, [_vm._v("\\n                        " + _vm._s(_vm.isEdit ? "Редактирование данных пользователя " : "Добавление нового пользователя"))])]), _vm._v(" "), _c("div", {\n    staticClass: "col-sm-6"\n  }, [_c("ol", {\n    staticClass: "breadcrumb float-sm-right"\n  }, [_c("li", {\n    staticClass: "breadcrumb-item"\n  }, [_c("router-link", {\n    staticStyle: {\n      color: "#007bff",\n      "text-decoration": "none",\n      "background-color": "transparent"\n    },\n    attrs: {\n      to: "/admin/users"\n    }\n  }, [_vm._v("\\n                                Пользователи\\n                            ")])], 1), _vm._v(" "), _c("li", {\n    staticClass: "breadcrumb-item active"\n  }, [_vm._v(_vm._s(_vm.isEdit ? "Редактирование" : "Добавление"))])])])])])]), _vm._v(" "), _c("section", {\n    staticClass: "content"\n  }, [_c("div", {\n    staticClass: "container-fluid"\n  }, [_c("div", {\n    staticClass: "row"\n  }, [_c("div", {\n    staticClass: "col-md-12"\n  }, [_c("div", {\n    staticClass: "card card-primary"\n  }, [_c("div", {\n    staticClass: "card-body"\n  }, [_c("div", {\n    staticClass: "form-group"\n  }, [_c("label", [_vm._v("Имя пользователя")]), _vm._v(" "), _c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.item.name,\n      expression: "item.name"\n    }],\n    staticClass: "form-control",\n    attrs: {\n      required: "",\n      name: "name",\n      type: "text",\n      placeholder: "Введите имя пользователя"\n    },\n    domProps: {\n      value: _vm.item.name\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.item, "name", $event.target.value);\n      }\n    }\n  })]), _vm._v(" "), _c("div", {\n    staticClass: "form-group"\n  }, [_c("label", [_vm._v("Фамилия пользователя")]), _vm._v(" "), _c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.item.surname,\n      expression: "item.surname"\n    }],\n    staticClass: "form-control",\n    attrs: {\n      required: "",\n      name: "surname",\n      type: "text",\n      placeholder: "Введите фамилию пользователя"\n    },\n    domProps: {\n      value: _vm.item.surname\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.item, "surname", $event.target.value);\n      }\n    }\n  })]), _vm._v(" "), _c("div", {\n    staticClass: "form-group"\n  }, [_c("label", [_vm._v("Отчество пользователя")]), _vm._v(" "), _c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.item.middleName,\n      expression: "item.middleName"\n    }],\n    staticClass: "form-control",\n    attrs: {\n      name: "middleName",\n      type: "text",\n      placeholder: "Введите отчество пользователя"\n    },\n    domProps: {\n      value: _vm.item.middleName\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.item, "middleName", $event.target.value);\n      }\n    }\n  })]), _vm._v(" "), _c("div", {\n    staticClass: "form-group"\n  }, [_c("label", [_vm._v("Почта (обязательно, если не задан телефон)")]), _vm._v(" "), _c("div", {\n    staticClass: "input-group"\n  }, [_c("div", {\n    staticClass: "input-group-prepend"\n  }, [_c("span", {\n    staticClass: "input-group-text"\n  }, [_c("i", {\n    staticClass: "fas fa-envelope"\n  })])]), _vm._v(" "), _c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.item.email,\n      expression: "item.email"\n    }],\n    staticClass: "form-control",\n    attrs: {\n      name: "email",\n      type: "text",\n      placeholder: "Введите почту пользователя"\n    },\n    domProps: {\n      value: _vm.item.email\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.item, "email", $event.target.value);\n      }\n    }\n  })])]), _vm._v(" "), _c("div", {\n    staticClass: "form-group"\n  }, [_c("label", [_vm._v("Телефон (обязательно, если не задана почта)")]), _vm._v(" "), _c("div", {\n    staticClass: "input-group"\n  }, [_c("div", {\n    staticClass: "input-group-prepend"\n  }, [_c("span", {\n    staticClass: "input-group-text"\n  }, [_c("i", {\n    staticClass: "fa fa-phone"\n  })])]), _vm._v(" "), _c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.item.phone,\n      expression: "item.phone"\n    }, {\n      name: "mask",\n      rawName: "v-mask",\n      value: ["+# ### ### ####", "+## ### ### ####", "+## ### #### ####"],\n      expression: "[\'+# ### ### ####\',\'+## ### ### ####\', \'+## ### #### ####\',]"\n    }],\n    staticClass: "form-control",\n    attrs: {\n      name: "phone",\n      type: "tel",\n      placeholder: "Введите телефон пользователя"\n    },\n    domProps: {\n      value: _vm.item.phone\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.item, "phone", $event.target.value);\n      }\n    }\n  })])]), _vm._v(" "), !_vm.isEdit ? _c("div", {\n    staticClass: "form-group"\n  }, [_c("label", [_vm._v("Пароль пользователя (не менее 8 символов)")]), _vm._v(" "), _c("div", {\n    staticClass: "input-group"\n  }, [_c("div", {\n    staticClass: "input-group-prepend"\n  }, [_c("span", {\n    staticClass: "input-group-text"\n  }, [_c("i", {\n    staticClass: "fa fa-key"\n  })])]), _vm._v(" "), _c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.item.password,\n      expression: "item.password"\n    }],\n    staticClass: "form-control",\n    attrs: {\n      name: "password",\n      type: "text",\n      placeholder: "Введите пароль пользователя",\n      required: ""\n    },\n    domProps: {\n      value: _vm.item.password\n    },\n    on: {\n      input: function input($event) {\n        if ($event.target.composing) return;\n        _vm.$set(_vm.item, "password", $event.target.value);\n      }\n    }\n  }), _vm._v(" "), _c("span", {\n    staticClass: "input-group-append"\n  }, [_c("button", {\n    staticClass: "btn btn-info btn-flat",\n    attrs: {\n      type: "button"\n    },\n    on: {\n      click: _vm.generatePassword\n    }\n  }, [_vm._v("Сгенерировать")])])])]) : _vm._e(), _vm._v(" "), !_vm.isEdit ? _c("div", {\n    staticClass: "form-group"\n  }, [_c("div", {\n    staticClass: "custom-control custom-switch"\n  }, [_c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.item.notificationsFromFavourite,\n      expression: "item.notificationsFromFavourite"\n    }],\n    staticClass: "custom-control-input",\n    attrs: {\n      type: "checkbox",\n      id: "notificationsFromFavourite"\n    },\n    domProps: {\n      checked: Array.isArray(_vm.item.notificationsFromFavourite) ? _vm._i(_vm.item.notificationsFromFavourite, null) > -1 : _vm.item.notificationsFromFavourite\n    },\n    on: {\n      change: function change($event) {\n        var $$a = _vm.item.notificationsFromFavourite,\n          $$el = $event.target,\n          $$c = $$el.checked ? true : false;\n        if (Array.isArray($$a)) {\n          var $$v = null,\n            $$i = _vm._i($$a, $$v);\n          if ($$el.checked) {\n            $$i < 0 && _vm.$set(_vm.item, "notificationsFromFavourite", $$a.concat([$$v]));\n          } else {\n            $$i > -1 && _vm.$set(_vm.item, "notificationsFromFavourite", $$a.slice(0, $$i).concat($$a.slice($$i + 1)));\n          }\n        } else {\n          _vm.$set(_vm.item, "notificationsFromFavourite", $$c);\n        }\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    staticClass: "custom-control-label",\n    attrs: {\n      "for": "notificationsFromFavourite"\n    }\n  }, [_vm._v("\\n                                        " + _vm._s(_vm.item.notificationsFromFavourite ? "Уведомления от избранного активированы для пользователя" : "Уведомления от избранного отключены для пользователя") + "\\n                                    ")])])]) : _vm._e(), _vm._v(" "), !_vm.isEdit ? _c("div", {\n    staticClass: "form-group"\n  }, [_c("div", {\n    staticClass: "custom-control custom-switch"\n  }, [_c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.item.notificationsFromMonitoring,\n      expression: "item.notificationsFromMonitoring"\n    }],\n    staticClass: "custom-control-input",\n    attrs: {\n      type: "checkbox",\n      id: "notificationsFromMonitoring"\n    },\n    domProps: {\n      checked: Array.isArray(_vm.item.notificationsFromMonitoring) ? _vm._i(_vm.item.notificationsFromMonitoring, null) > -1 : _vm.item.notificationsFromMonitoring\n    },\n    on: {\n      change: function change($event) {\n        var $$a = _vm.item.notificationsFromMonitoring,\n          $$el = $event.target,\n          $$c = $$el.checked ? true : false;\n        if (Array.isArray($$a)) {\n          var $$v = null,\n            $$i = _vm._i($$a, $$v);\n          if ($$el.checked) {\n            $$i < 0 && _vm.$set(_vm.item, "notificationsFromMonitoring", $$a.concat([$$v]));\n          } else {\n            $$i > -1 && _vm.$set(_vm.item, "notificationsFromMonitoring", $$a.slice(0, $$i).concat($$a.slice($$i + 1)));\n          }\n        } else {\n          _vm.$set(_vm.item, "notificationsFromMonitoring", $$c);\n        }\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    staticClass: "custom-control-label",\n    attrs: {\n      "for": "notificationsFromMonitoring"\n    }\n  }, [_vm._v("\\n                                        " + _vm._s(_vm.item.notificationsFromMonitoring ? "Уведомления от мониторинга активированы для пользователя" : "Уведомления от мониторинга отключены для пользователя") + "\\n                                    ")])])]) : _vm._e(), _vm._v(" "), !_vm.isEdit ? _c("div", {\n    staticClass: "form-group"\n  }, [_c("div", {\n    staticClass: "custom-control custom-switch"\n  }, [_c("input", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.item.notificationsToEmail,\n      expression: "item.notificationsToEmail"\n    }],\n    staticClass: "custom-control-input",\n    attrs: {\n      type: "checkbox",\n      id: "notificationsToEmail"\n    },\n    domProps: {\n      checked: Array.isArray(_vm.item.notificationsToEmail) ? _vm._i(_vm.item.notificationsToEmail, null) > -1 : _vm.item.notificationsToEmail\n    },\n    on: {\n      change: function change($event) {\n        var $$a = _vm.item.notificationsToEmail,\n          $$el = $event.target,\n          $$c = $$el.checked ? true : false;\n        if (Array.isArray($$a)) {\n          var $$v = null,\n            $$i = _vm._i($$a, $$v);\n          if ($$el.checked) {\n            $$i < 0 && _vm.$set(_vm.item, "notificationsToEmail", $$a.concat([$$v]));\n          } else {\n            $$i > -1 && _vm.$set(_vm.item, "notificationsToEmail", $$a.slice(0, $$i).concat($$a.slice($$i + 1)));\n          }\n        } else {\n          _vm.$set(_vm.item, "notificationsToEmail", $$c);\n        }\n      }\n    }\n  }), _vm._v(" "), _c("label", {\n    staticClass: "custom-control-label",\n    attrs: {\n      "for": "notificationsToEmail"\n    }\n  }, [_vm._v("\\n                                        " + _vm._s(_vm.item.notificationsToEmail ? "Уведомления на почту активированы для пользователя" : "Уведомления на почту отключены для пользователя") + "\\n                                    ")])])]) : _vm._e(), _vm._v(" "), _c("div", {\n    staticClass: "form-group"\n  }, [_c("label", [_vm._v("Выберите тариф для пользователя")]), _vm._v(" "), _c("div", {\n    staticClass: "input-group"\n  }, [_c("div", {\n    staticClass: "input-group-prepend"\n  }, [_c("span", {\n    staticClass: "input-group-text"\n  }, [_c("i", {\n    staticClass: "fa fa-tags"\n  })])]), _vm._v(" "), _c("select", {\n    directives: [{\n      name: "model",\n      rawName: "v-model",\n      value: _vm.item.tariff,\n      expression: "item.tariff"\n    }],\n    staticClass: "form-control custom-select rounded-0",\n    on: {\n      change: function change($event) {\n        var $$selectedVal = Array.prototype.filter.call($event.target.options, function (o) {\n          return o.selected;\n        }).map(function (o) {\n          var val = "_value" in o ? o._value : o.value;\n          return val;\n        });\n        _vm.$set(_vm.item, "tariff", $event.target.multiple ? $$selectedVal : $$selectedVal[0]);\n      }\n    }\n  }, [_c("option", {\n    domProps: {\n      value: null\n    }\n  }, [_vm._v("Выберите тариф для пользователя")]), _vm._v(" "), _vm._l(_vm.tariffs, function (tariff) {\n    return _c("option", {\n      domProps: {\n        value: tariff.id\n      }\n    }, [_vm._v(_vm._s(tariff.title) + "\\n                                        ")]);\n  })], 2)])]), _vm._v(" "), _c("div", {\n    staticClass: "form-group"\n  }, [_c("label", [_vm._v("Выберите регион для пользователя")]), _vm._v(" "), _c("div", {\n    staticClass: "input-group"\n  }, [_c("div", {\n    staticClass: "input-group-prepend"\n  }, [_c("span", {\n    staticClass: "input-group-text"\n  }, [_c("i", {\n    staticClass: "fa fa-location-arrow"\n  })])]), _vm._v(" "), _c("v-select", {\n    staticClass: "my-v-select",\n    attrs: {\n      options: _vm.regions\n    },\n    model: {\n      value: _vm.item.region,\n      callback: function callback($$v) {\n        _vm.$set(_vm.item, "region", $$v);\n      },\n      expression: "item.region"\n    }\n  })], 1)]), _vm._v(" "), _c("div", {\n    staticClass: "form-group"\n  }, [_c("label", [_vm._v("Роли")]), _vm._v(" "), _c("div", {\n    staticClass: "input-group"\n  }, [_c("div", {\n    staticClass: "input-group-prepend"\n  }, [_c("span", {\n    staticClass: "input-group-text"\n  }, [_c("i", {\n    staticClass: "fa fa-users"\n  })])]), _vm._v(" "), _c("v-select", {\n    staticClass: "my-v-select",\n    attrs: {\n      multiple: "",\n      options: _vm.roles.map(function (role) {\n        return role.name;\n      })\n    },\n    model: {\n      value: _vm.item.roles,\n      callback: function callback($$v) {\n        _vm.$set(_vm.item, "roles", $$v);\n      },\n      expression: "item.roles"\n    }\n  })], 1)]), _vm._v(" "), _c("button", {\n    staticClass: "btn btn-success float-right",\n    attrs: {\n      type: "submit"\n    },\n    on: {\n      click: function click($event) {\n        _vm.isEdit ? _vm.updateData(_vm.item) : _vm.storeData(_vm.item);\n      }\n    }\n  }, [_vm._v("Сохранить\\n                            ")])])])])])])])]);\n};\nvar staticRenderFns = [];\nrender._withStripped = true;\n\n;// CONCATENATED MODULE: ./resources/js/admin/users/AddUser.vue?vue&type=template&id=b923fd8a&scoped=true&\n\n// EXTERNAL MODULE: ./node_modules/vuex/dist/vuex.esm.js\nvar vuex_esm = __webpack_require__(20629);\n// EXTERNAL MODULE: ./node_modules/axios/index.js\nvar axios = __webpack_require__(9669);\nvar axios_default = /*#__PURE__*/__webpack_require__.n(axios);\n// EXTERNAL MODULE: ./node_modules/vue-the-mask/dist/vue-the-mask.js\nvar vue_the_mask = __webpack_require__(32982);\n;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/admin/users/AddUser.vue?vue&type=script&lang=js&\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a \'" + methodName + "\' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\n\n\n/* harmony default export */ const AddUservue_type_script_lang_js_ = ({\n  name: "AddUser",\n  data: function data() {\n    return {\n      roles: [],\n      tariffs: [],\n      regions: []\n    };\n  },\n  directives: {\n    mask: vue_the_mask.mask\n  },\n  created: function created() {\n    var _this = this;\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _this.$store.commit(\'setCurrentRoute\', _this.$route.path.replace(/(\\/*$)/, ""));\n            if (!_this.isEdit) {\n              _context.next = 6;\n              break;\n            }\n            _context.next = 4;\n            return _this.editItem();\n          case 4:\n            _context.next = 7;\n            break;\n          case 6:\n            _this.$store.commit(\'setItem\', {\n              name: \'\',\n              surname: \'\',\n              middleName: \'\',\n              email: null,\n              region: null,\n              phone: null,\n              password: \'\',\n              notificationsFromFavourite: true,\n              notificationsFromMonitoring: true,\n              notificationsToEmail: true,\n              roles: [\'user\'],\n              tariff: null\n            });\n          case 7:\n            _context.next = 9;\n            return _this.getRoles();\n          case 9:\n            _context.next = 11;\n            return _this.getTariffs();\n          case 11:\n            _context.next = 13;\n            return _this.getRegions();\n          case 13:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  },\n  computed: _objectSpread(_objectSpread({}, (0,vuex_esm/* mapGetters */.Se)([\'item\', \'types\'])), {}, {\n    isEdit: function isEdit() {\n      return !this.$route.path.includes(\'add\');\n    }\n  }),\n  methods: _objectSpread(_objectSpread({}, (0,vuex_esm/* mapActions */.nv)([\'editItem\', \'updateData\', \'addData\'])), {}, {\n    storeData: function storeData(item) {\n      this.addData(item);\n    },\n    generatePassword: function generatePassword() {\n      var length = 8,\n        charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",\n        retVal = "";\n      for (var i = 0, n = charset.length; i < length; ++i) {\n        retVal += charset.charAt(Math.floor(Math.random() * n));\n      }\n      this.item.password = retVal;\n    },\n    getRoles: function getRoles() {\n      var _this2 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return axios_default()({\n                method: \'get\',\n                url: \'/api/admin/roles\',\n                data: {}\n              }).then(function (response) {\n                _this2.roles = response.data.data;\n              })["catch"](function (error) {\n                console.log(error);\n              });\n            case 2:\n            case "end":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }))();\n    },\n    getTariffs: function getTariffs() {\n      var _this3 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return axios_default()({\n                method: \'get\',\n                url: \'/api/admin/tariffs\',\n                data: {}\n              }).then(function (response) {\n                _this3.tariffs = response.data.data;\n              })["catch"](function (error) {\n                console.log(error);\n              });\n            case 2:\n            case "end":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }))();\n    },\n    getRegions: function getRegions() {\n      var _this4 = this;\n      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return axios_default()({\n                method: \'get\',\n                url: \'/api/admin/regions\',\n                data: {}\n              }).then(function (response) {\n                _this4.regions = response.data;\n              })["catch"](function (error) {\n                console.log(error);\n              });\n            case 2:\n            case "end":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }))();\n    }\n  })\n});\n;// CONCATENATED MODULE: ./resources/js/admin/users/AddUser.vue?vue&type=script&lang=js&\n /* harmony default export */ const users_AddUservue_type_script_lang_js_ = (AddUservue_type_script_lang_js_); \n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(93379);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/admin/users/AddUser.vue?vue&type=style&index=0&id=b923fd8a&prod&scoped=true&lang=css&\nvar AddUservue_type_style_index_0_id_b923fd8a_prod_scoped_true_lang_css_ = __webpack_require__(98095);\n;// CONCATENATED MODULE: ./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-9.use[1]!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-9.use[2]!./node_modules/vue-loader/lib/index.js??vue-loader-options!./resources/js/admin/users/AddUser.vue?vue&type=style&index=0&id=b923fd8a&prod&scoped=true&lang=css&\n\n            \n\nvar options = {};\n\noptions.insert = "head";\noptions.singleton = false;\n\nvar update = injectStylesIntoStyleTag_default()(AddUservue_type_style_index_0_id_b923fd8a_prod_scoped_true_lang_css_/* default */.Z, options);\n\n\n\n/* harmony default export */ const users_AddUservue_type_style_index_0_id_b923fd8a_prod_scoped_true_lang_css_ = (AddUservue_type_style_index_0_id_b923fd8a_prod_scoped_true_lang_css_/* default.locals */.Z.locals || {});\n;// CONCATENATED MODULE: ./resources/js/admin/users/AddUser.vue?vue&type=style&index=0&id=b923fd8a&prod&scoped=true&lang=css&\n\n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(51900);\n;// CONCATENATED MODULE: ./resources/js/admin/users/AddUser.vue\n\n\n\n;\n\n\n/* normalize component */\n\nvar component = (0,componentNormalizer/* default */.Z)(\n  users_AddUservue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  "b923fd8a",\n  null\n  \n)\n\n/* harmony default export */ const AddUser = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///34858\n')}}]);