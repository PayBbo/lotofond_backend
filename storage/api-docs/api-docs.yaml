openapi: 3.0.0
info:
  title: 'BankrotMP API'
  version: 1.0.0
servers:
  - url: /api
paths:
  /registration:
    post:
      parameters:
        - name: Content-Language
          in: header
          description: Заголовок для определения локали (ru, en, zh_CN)
          required: true
      tags:
        - Registration
      summary: 'Регистрация пользователя'
      operationId: register
      requestBody:
        description: 'Pass user credentials'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
            examples:
              email:
                value:
                  grantType: email
                  email: test@gmail.com
                  password: ne6Jo$zi
                  name: Ivan
                  surname: Ivanov
              phone:
                value:
                  grantType: phone
                  phone: '74951239999'
                  password: LRn&z!4Y
                  name: Ivan
                  surname: Ivanov
      responses:
        "422":
          description: 'Wrong credentials response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: 'Successful response, verification code sent to user'
        "550":
          description: 'Message can''t be sent to user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /registration/code:
    post:
      parameters:
        - name: Content-Language
          in: header
          description: Заголовок для определения локали (ru, en, zh_CN)
          required: true
      tags:
        - Registration
      summary: 'Запрос повторной отправки кода подтверждения аккаунта'
      operationId: requestRegistrationCode
      requestBody:
        description: 'User email'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordCodeRequest'
            examples:
              email:
                value:
                  grantType: email
                  email: test@gmail.com
              phone:
                value:
                  grantType: phone
                  phone: '74951239999'
      responses:
        "422":
          description: 'Wrong email response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: 'Successful response, verification code sent to user'
        "550":
          description: 'Message can''t be sent to user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /registration/code/verify:
    post:
      parameters:
        - name: Content-Language
          in: header
          description: Заголовок для определения локали (ru, en, zh_CN)
          required: true
      tags:
        - Registration
      summary: 'Отправка кода для завершения регистрации'
      operationId: verifyRegistrationCode
      requestBody:
        description: Код подтверждения
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeRequest'
            examples:
              email:
                value:
                  grantType: email
                  email: test@gmail.com
                  code: 111111
              phone:
                value:
                  grantType: phone
                  phone: '74951239999'
                  code: 111111
      responses:
        "200":
          description: Данные аккаунта
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenData'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login:
    post:
      parameters:
        - name: Content-Language
          in: header
          description: Заголовок для определения локали (ru, en, zh_CN)
          required: true
      tags:
        - Login
      summary: Вход пользователя
      operationId: login
      requestBody:
        description: Данные для авторизации
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
            examples:
              email:
                value:
                  grantType: email
                  email: test@gmail.com
                  password: ne6Jo$zi
              phone:
                value:
                  grantType: phone
                  phone: '74951239999'
                  password: LRn&z!4Y
        required: true
      responses:
        "200":
          description: Данные аккаунта
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenData'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /account/password/code:
    parameters:
      - name: Content-Language
        in: header
        description: Заголовок для определения локали (ru, en, zh_CN)
        required: true
    post:
      tags:
        - Account
      summary: Запрос кода подтверждения для сброса пароля
      operationId: getResetPasswordCode
      requestBody:
        description: Почта или номер телефона пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordCodeRequest'
            examples:
              email:
                value:
                  grantType: email
                  email: test@gmail.com
              phone:
                value:
                  grantType: phone
                  phone: '74951239999'
        required: true
      responses:
        "422":
          description: 'Wrong credentials response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: 'Successful response, code sent to user '
        "550":
          description: 'Message can''t be sent to user'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /account/password/code/verify:
    parameters:
      - name: Content-Language
        in: header
        description: Заголовок для определения локали (ru, en, zh_CN)
        required: true
    post:
      tags:
        - Account
      summary: Отправка пользователем кода подтверждения для сброса пароля
      operationId: verifyResetPasswordCode
      requestBody:
        description: Код подтверждения
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CodeRequest'
            examples:
              email:
                value:
                  grantType: email
                  email: test@gmail.com
                  code: '123451'
              phone:
                value:
                  grantType: phone
                  phone: '74951239999'
                  code: '123451'
        required: true
      responses:
        "422":
          description: 'Wrong credentials response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: 'Successful response'
  /account/password/reset:
    parameters:
      - name: Content-Language
        in: header
        description: Заголовок для определения локали (ru, en, zh_CN)
        required: true
    post:
      tags:
        - Account
      summary: Сброс пароля пользователя
      operationId: resetPassword
      requestBody:
        description: Данные для сброса пароля
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
            examples:
              email:
                value:
                  grantType: email
                  email: test@gmail.com
                  password: bc7$etyZ
                  code: '123451'
              phone:
                value:
                  grantType: phone
                  phone: '74951239999'
                  password: bc7$etyZ
                  code: '123451'
        required: true
      responses:
        "200":
          description: Данные аккаунта
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenData'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /account/user/update:
    parameters:
      - name: Content-Language
        in: header
        description: Заголовок для определения локали (ru, en, zh_CN)
        required: true
    put:
      tags:
        - Account
      summary: Обновление информации об аккаунте
      operationId: updateUser
      requestBody:
        description: Информация об аккаунте пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "422":
          description: 'Wrong credentials response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "200":
          description: 'Successful response'
      security:
        - bearerAuth: [ ]
  /account/user:
    get:
      tags:
        - Account
      summary: Получение информации об аккаунте пользователя
      operationId: getUser
      responses:
        "200":
          description: Информация об аккаунте пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: [ ]
  /account/logout:
    get:
      tags:
        - Account
      summary: Выход пользователя из аккаунта
      operationId: logout
      responses:
        "200":
          description: Выход прошел успешно
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: [ ]
  /account/refresh/token:
    post:
      tags:
        - Account
      summary: Обновление токена
      operationId: refreshToken
      requestBody:
        description: данные для обновления токена
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  required: true
      responses:
        "200":
          description: Данные аккаунта
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenData'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /trades:
    put:
      parameters:
        - name: Content-Language
          in: header
          description: Заголовок для определения локали (ru, en, zh_CN)
          required: true
        - in: query
          name: page
          schema:
            type: integer
          required: true
          description: Номер страницы для серверной пагинации
      tags:
        - Trades
      summary: Получение информации о торгах
      requestBody:
        description: данные для сортировки лотов
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sort:
                  $ref: '#/components/schemas/Sort'
      operationId: getTrades
      responses:
        "200":
          description: Информация о 20 последних торгах
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeInfo'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: [ ]
  /trades/filter:
    put:
      parameters:
        - name: Content-Language
          in: header
          description: Заголовок для определения локали (ru, en, zh_CN)
          required: true
        - in: query
          name: page
          schema:
            type: integer
          required: true
          description: Номер страницы для серверной пагинации
      tags:
        - Trades
      summary: Получение информации о торгах в соответствии с фильтрами
      operationId: getFilteredTrades
      requestBody:
        description: Данные о выбранных фильтрах
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Filters'
        required: true
      responses:
        "200":
          description: Информация о 20 торгах
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeInfo'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /trades/{auctionId}:
    put:
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          required: true
          description: Номер страницы для серверной пагинации
        - name: Content-Language
          in: header
          description: Заголовок для определения локали (ru, en, zh_CN)
          required: true
        - in: path
          name: auctionId
          schema:
            type: integer
          required: true
          description: Айдишник торга, все лоты которого нужно получить
      tags:
        - Trades
      summary: Получение информации о лотах выбранного торга
      requestBody:
        description: данные для сортировки лотов
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                sort:
                  $ref: '#/components/schemas/Sort'
      operationId: getLotsByAuction
      responses:
        "200":
          description: Информация о 20 лотах выбранного торга
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeInfo'
        "404":
          description: Торг по переданному айдишнику не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /trades/filter/trade-places:
    get:
      tags:
        - FiltersData
      summary: Получение информации о торговых площадках для отображения в фильтрах
      operationId: getTradePlacesForFilter
      responses:
        "200":
          description: Информация о торговых площадках
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradePlaces'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /trades/filter/categories:
    get:
      parameters:
        - name: Content-Language
          in: header
          description: Заголовок для определения локали (ru, en, zh_CN)
          required: true
      tags:
        - FiltersData
      summary: Получение информации о категориях для отображения в фильтрах
      operationId: getCategoriesForFilter
      responses:
        "200":
          description: Информация о категориях
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categories'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /trades/filter/regions:
    get:
      tags:
        - FiltersData
      summary: Получение информации о регионах для отображения в фильтрах
      operationId: getRegionsForFilter
      responses:
        "200":
          description: Информация о регионах
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Regions'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /trades/filter/prices:
    get:
      tags:
        - FiltersData
      summary: Получение информации о минимальных/максимальных ценах для отображения в фильтрах
      operationId: getPricesForFilter
      responses:
        "200":
          description: Информация о ценах
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prices'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /trades/filter/bidders/{type}:
    put:
      parameters:
        - in: path
          name: type
          schema:
            type: string
            enum:
              - debtors
              - organizers
              - arbitrationManagers
          required: true
          description: Роль участников торгов, которых нужно получить для фильтрации
      tags:
        - FiltersData
      summary: Получение информации о должниках/организаторах торгов/арбитражных управляющих для отображения в фильтрах
      operationId: getBiddersForFilter
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                searchString:
                  type: string
                  required: false
                  description: Строка для поиска по имени/фамилии/отчеству/короткому имени
      responses:
        "200":
          description: Информация о должнике/организаторе торгов/арбитражном управляющем
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BidderInfo'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /trades/lot/{lotId}:
    get:
      parameters:
        - in: path
          name: lotId
          schema:
            type: integer
          required: true
          description: Айдишник лота, информацию о котором нужно получить
      tags:
        - Trades
      summary: Получение информации о лоте
      operationId: getLotInformation
      responses:
        "200":
          description: Информация о лоте
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lot'
        "404":
          description: Лот по переданному айдишнику не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /trades/lot/action:
    put:
      tags:
        - Trades
      summary: Добавление/удаление лота в/из "просмотрено", "скрыто", "закреплено"
      operationId: actionWithLot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionWithLot'
            examples:
              Add/delete to/from seen:
                value:
                  type: seen
                  lotId: 1
              Add/delete to/from fixed:
                value:
                  type: fixed
                  lotId: 1
              Add/delete to/from hidden:
                description: если скрываем все лоты торга - не передавать lotId
                value:
                  type: hidden
                  lotId: 1
                  auctionId: 1
      responses:
        "200":
          description: Лот успешно добавлен/удален в/из "просмотрено", "скрыто", "закреплено"
        "404":
          description: Лот/торг по переданному айдишнику не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: [ ]
  /favourite/add/edit/path:
    post:
      parameters:
        - name: Content-Language
          in: header
          description: Заголовок для определения локали (ru, en, zh_CN)
          required: true
      tags:
        - Favourite
      summary: Создание/редактирование папки в избранном
      operationId: addEditFavouritePath
      requestBody:
        description: данные папки избранного
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PathFavourite'
      responses:
        "200":
          description: Папка избранного успешно создана/отредактирована
        "403":
          description: Ошибка при редактировании папки "Общее"
        "422":
          description: Ошибка валидации данных либо ошибка превышения лимита количества папок в 100
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: [ ]
  /favourite/delete/path/{id}:
    delete:
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Айдишник папки, которую удаляем в избранном
      tags:
        - Favourite
      summary: Удаление папки в избранном
      operationId: deleteFavouritePath
      responses:
        "200":
          description: Папка избранного успешно удалена
        "403":
          description: Ошибка при удалении папки "Общее"
        "422":
          description: Ошибка валидации данных (папка не существует)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: [ ]
  /favourite/download/path:
    post:
      parameters:
        - name: Content-Language
          in: header
          description: Заголовок для определения локали (ru, en, zh_CN)
          required: true
      tags:
        - Favourite
      summary: Скачивание в эксель файл папки в избранном
      operationId: downloadFavouritePath
      requestBody:
        description: данные для создания эксель-файла
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExcelParams'
      responses:
        "200":
          description: Файл эксель успешно создан
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    description: ссылка для скачивания файла
        "422":
          description: Ошибка валидации данных (папка не существует)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /favourite:
    put:
      parameters:
        - name: Content-Language
          in: header
          description: Заголовок для определения локали (ru, en, zh_CN)
          required: true
        - in: query
          name: page
          schema:
            type: integer
          required: true
          description: Номер страницы для серверной пагинации
      tags:
        - Favourite
      summary: Получение данных о лотах в папке избранного
      operationId: getFavourites
      requestBody:
        description: данные для получения лотов
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pathId:
                  type: integer
                  description: айдишник папки избранного - если нужна папка "Все" - параметр пуст или не указан
                includedWords:
                  type: string
                  description: разделитель - запятая
                  example: Машина, лот №1
                marks:
                  type: array
                  description: айдишники меток пользователя для поиска
                sort:
                  $ref: "#/components/schemas/Sort"
      responses:
        "200":
          description: данные о лотах в папке избранного
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeInfo'
        "422":
          description: Ошибка валидации данных (папка не существует)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: [ ]
  /favourite/add/lots:
    post:
      parameters:
        - name: Content-Language
          in: header
          description: Заголовок для определения локали (ru, en, zh_CN)
          required: true
      tags:
        - Favourite
      summary: Добавление лотов в папку избранного
      operationId: addLotsToFavourite
      requestBody:
        description: данные для добавления лотов
        required: true
        content:
          application/json:
            schema:
              type: object
              description: если нужно добавить лоты в папку Общее - не передаем ни айдишник, ни имя
              required:
                - lots
              properties:
                pathId:
                  type: integer
                  description: айдишник папки избранного, если выбрана существующая папка
                pathName:
                  type: string
                  description: название папки, если создаем ее
                lots:
                  type: array
                  example: [1, 2, 3]
                  description: массив с айдишниками лотов для добавления в папку
      responses:
        "200":
          description: лоты успешно добавлены в избранное
        "422":
          description: Ошибка валидации данных (папка не существует)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /favourite/get/paths:
    get:
      tags:
        - Favourite
      summary: Получение данных о папках избранного авторизованного пользователя
      operationId: getFavouritePaths
      responses:
        "200":
          description: данные о папках избранного
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathFavourite"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /favourite/delete/lot:
    delete:
      tags:
        - Favourite
      summary: Удаление лота из папки избранного
      operationId: deleteLotFromFavourite
      requestBody:
        description: данные для удаления лота из избранного
        required: true
        content:
          application/json:
            schema:
              type: object
              description: если нужно удалить лот из всех папок избранного - не передаем айдишник папки
              required:
                - lotId
              properties:
                pathId:
                  type: integer
                  description: айдишник папки избранного, если удаляем из конкретной папки
                lotId:
                  type: integer
                  description: айдишник лота
      responses:
        "200":
          description: лот был успешно удален из избранного
        "422":
          description: Ошибка валидации данных (папка или лот не существует)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /favourite/move/lot:
    put:
      parameters:
        - name: Content-Language
          in: header
          description: Заголовок для определения локали (ru, en, zh_CN)
          required: true
      tags:
        - Favourite
      summary: Перемещение лота из одной папки избранного в другую
      operationId: moveLotInFavourite
      requestBody:
        description: данные для перемещения лота
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - lotId
                - currentPathId
                - newPathId
              properties:
                currentPathId:
                  type: integer
                  description: айдишник папки избранного, в которой сейчас находится лот
                newPathId:
                  type: integer
                  description: айдишник папки избранного, в которую нужно переместить лот
                lotId:
                  type: integer
                  description: айдишник лота
      responses:
        "200":
          description: лот был успешно перемещен
        "422":
          description: Ошибка валидации данных (папка или лот не существует)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /monitoring/add/edit/path:
    post:
      tags:
        - Monitoring
      summary: Создание/редактирование папки в мониторинге
      operationId: addEditMonitoringPath
      requestBody:
        description: данные папки в мониторинге
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PathMonitoring'
      responses:
        "200":
          description: Папка в мониторинге успешно создана/отредактирована
        "422":
          description: Ошибка валидации данных либо ошибка превышения лимита количества папок в 100
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /monitoring/delete/path/{id}:
    delete:
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Айдишник папки, которую удаляем в мониторинге
      tags:
        - Monitoring
      summary: Удаление папки в мониторинге
      operationId: deleteMonitoringPath
      responses:
        "200":
          description: Папка избранного успешно удалена
        "422":
          description: Ошибка валидации данных (папка не существует)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /monitoring:
    put:
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          required: true
          description: Номер страницы для серверной пагинации
      tags:
        - Monitoring
      summary: Получение данных о лотах в папке мониторинга
      operationId: getMonitoringLots
      requestBody:
        description: данные для сортировки лотов
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                pathId:
                  type: integer
                  required: true
                includedWords:
                  type: string
                  description: разделитель - запятая
                  example: Машина, лот №1
                marks:
                  type: array
                  description: айдишники меток пользователя для поиска
                  example: [1, 2, 3]
                sort:
                  $ref: '#/components/schemas/Sort'
      responses:
        "200":
          description: данные о лотах в папке мониторинга
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeInfo'
        "422":
          description: Ошибка валидации данных (папка не существует)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /monitoring/get/paths:
    get:
      tags:
        - Monitoring
      summary: Получение данных о папках мониторинга авторизованного пользователя
      operationId: getMonitoringPaths
      responses:
        "200":
          description: данные о папках мониторинга
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PathMonitoringData"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: [ ]
  /monitoring/delete/lot:
    delete:
      tags:
        - Monitoring
      summary: Удаление лота из папки мониторинга
      operationId: deleteLotFromMonitoring
      requestBody:
        description: данные для удаления лота из мониторинга
        required: true
        content:
          application/json:
            schema:
              type: object
              description: если нужно удалить лот из всех папок мониторинга - не передаем айдишник папки
              required:
                - lotId
              properties:
                pathId:
                  type: integer
                  description: айдишник папки мониторинга, если удаляем из конкретной папки
                lotId:
                  type: integer
                  description: айдишник лота
      responses:
        "200":
          description: лот был успешно удален из мониторинга
        "422":
          description: Ошибка валидации данных (папка или лот не существует)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /notifications/{type}:
    get:
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          required: true
          description: Номер страницы для серверной пагинации
        - in: path
          name: type
          schema:
            type: string
            enum:
              - favourite
              - monitoring
              - platform
              - organizers
              - all
          required: true
          description: Номер страницы для серверной пагинации
      tags:
        - Notifications
      summary: Получение данных об уведомлениях пользователя
      operationId: getNotifications
      responses:
        "200":
          description: данные об уведомлениях
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Notifications"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /mark:
    post:
      tags:
        - Marks
      summary: Добавление метки к лоту
      operationId: addMark
      requestBody:
        description: данные для добавления метки
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lotId:
                  type: integer
                  description: айдишник лота
                mark:
                  type: string
                  description: значение метки
      responses:
        "200":
          description: метка успешно добавлена
        "422":
          description: Ошибка валидации данных (лот не существует)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /mark/{markId}/lot/{lotId}:
    delete:
      parameters:
        - in: path
          name: lotId
          schema:
            type: integer
          required: true
          description: Айдишник лота, с которого удаляем метку
        - in: path
          name: markId
          schema:
            type: integer
          required: true
          description: Айдишник метки, которую удаляем
      tags:
        - Marks
      summary: Удаление метки
      operationId: deleteMark
      responses:
        "200":
          description: Метка была успешно удалена с лота
        "422":
          description: Ошибка валидации данных (лот либо метка не существуют)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /mark/lot/{lotId}:
    get:
      parameters:
        - in: path
          name: lotId
          schema:
            type: integer
          required: true
          description: Айдишник лота, для которого получаем список меток
      tags:
        - Marks
      summary: Получение меток для лота
      operationId: getMarksByLot
      responses:
        "200":
          description: список меток, присвоенных лоту
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Marks'
        "422":
          description: Ошибка валидации данных (лот не существуют)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /marks:
    get:
      tags:
        - Marks
      summary: Получение всех меток пользователя
      operationId: getMarks
      responses:
        "200":
          description: список меток пользователя
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Marks'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /files/{lotId}:
    get:
      parameters:
        - in: path
          name: lotId
          schema:
            type: integer
          required: true
          description: Айдишник лота, для которого получаем список файлов
      tags:
        - Files
      summary: Получение списка файлов для лота
      operationId: getFiles
      responses:
        "200":
          description: список файлов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Files'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /bidders/trades:
    put:
      tags:
        - Bidders
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          required: true
          description: Номер страницы для серверной пагинации
      summary: Получение активных/неактивных торгов выбранного участника
      operationId: getTradesByBidder
      requestBody:
        description: данные получения активных/неактивных лотов участника торгов
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bidderType:
                  type: string
                  enum:
                    - debtor
                    - organizer
                    - arbitrationManager
                type:
                  type: string
                  enum:
                    - active
                    - inactive
                bidderId:
                  type: integer
                  description: айдишник участника торгов
                exceptionLotId:
                  type: integer
                  description: айди лота, который нужно исключить из поиска
      responses:
        "200":
          description: список активных/неактивных торгов выбранного участника
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradeInfo'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /bidders/{bidderId}:
    get:
      tags:
        - Bidders
      parameters:
        - in: path
          name: bidderId
          schema:
            type: integer
          required: true
          description: Айдишник участника торгов
      summary: Получение данных об арбитражном управляющем/организаторе/должнике
      operationId: getBidder
      responses:
        "200":
          description: данные об арбитражных управляющем/организаторе/должнике
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BidderInfo'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /files/store:
    post:
      tags:
        - Files
      summary: Загрузка файлов на сервер
      operationId: storeFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/File'
      responses:
        "200":
          description: Загрузка файла прошла успешно
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Files"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /files/{id}:
    delete:
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Айдишник файла, который удаляем
      tags:
        - Files
      summary: Удаление пользовательского файла/картинки
      operationId: deleteUserFile
      responses:
        "200":
          description: Файл был успешно удален
        "422":
          description: Ошибка валидации данных (файла не существует либо он не является пользовательским)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /statistics/categories:
    get:
      tags:
        - Statistics
      summary: Получение информации о количестве лотов по категориям
      operationId: getStatisticsByCategories
      responses:
        "200":
          description: Информация о количестве лотов по категориям
          content:
            application/json:
              schema:
                type: object
                example:
                  {
                    'realEstate': {'allLotsCount': 100, 'activeLotsCount': 90},
                   'commercialRealEstate': {'allLotsCount': 100, 'activeLotsCount': 90}
                  }
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /statistics/lots:
    get:
      tags:
        - Statistics
      summary: Получение информации о количестве активных/неактивных лотов
      operationId: getStatisticsByLots
      responses:
        "200":
          description: Информация о количестве активных/неактивных лотов
          content:
            application/json:
              schema:
                type: object
                example:
                  {'activeLotsCount': 100, 'nonactiveLotsCount': 200, 'allLotsCount': 300}
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /note:
    post:
      tags:
        - Notes
      summary: Добавление заметки к лоту/организатору торгов
      operationId: addNote
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddNote"
      responses:
        "200":
          description: Добавление заметки прошло успешно
        "422":
          description: Ошибка валидации
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /note/edit:
    put:
      tags:
        - Notes
      summary: Редактирование заметки к лоту/организатору торгов
      operationId: editNote
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                noteId:
                  type: integer
      responses:
        "200":
          description: Редактирование заметки прошло успешно
        "422":
          description: Ошибка валидации
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
  /note/delete:
    delete:
      tags:
        - Notes
      summary: Удаление заметки к лоту/организатору торгов
      operationId: deleteNote
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                noteId:
                  type: integer
      responses:
        "200":
          description: Удаление заметки прошло успешно
        "422":
          description: Ошибка валидации
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - bearerAuth: []
components:
  schemas:
    Register:
      required:
        - grantType
        - surname
        - name
      type: object
      properties:
        grantType:
          type: string
          description: Тип данных для регистрации
          enum:
            - email
            - phone
        phone:
          type: string
          description: Номер телефона пользователя
          example: '79225551234'
        email:
          type: string
          description: Email пользователя
          example: 'user@user.user1'
        password:
          type: string
          description: Пароль пользователя
          example: 'qwerty12'
        name:
          type: string
          example: Ivan
        surname:
          type: string
          example: Ivanov
    Auth:
      required:
        - grantType
      type: object
      properties:
        grantType:
          type: string
          description: Тип авторизационных данных
          enum:
            - email
            - phone
        phone:
          type: string
          description: Номер телефона пользователя
        email:
          type: string
          description: Email пользователя
        password:
          type: string
          description: Пароль пользователя
    ResetPasswordCodeRequest:
      required:
        - grantType
      type: object
      properties:
        grantType:
          type: string
          description: Тип данных для восстановления пароля
          enum:
            - email
            - phone
        phone:
          type: string
          description: Номер телефона пользователя
        email:
          type: string
          description: Email пользователя
    CodeRequest:
      required:
        - code
        - grantType
      type: object
      properties:
        grantType:
          type: string
        email:
          type: string
        phone:
          type: string
        code:
          type: string
    ResetPasswordRequest:
      required:
        - code
        - grantType
        - password
      type: object
      properties:
        grantType:
          type: string
        email:
          type: string
        phone:
          type: string
        password:
          type: string
        code:
          type: string
    TokenData:
      required:
        - accessToken
        - expiresIn
        - refreshToken
      type: object
      properties:
        accessToken:
          type: string
        expiresIn:
          type: integer
          format: int64
        refreshToken:
          type: string
    User:
      required:
        - name
        - surname
        - email
        - phone
      type: object
      properties:
        name:
          type: string
          example: Ivan
        middleName:
          type: string
          example: Ivanovich
        surname:
          type: string
          example: Ivanov
        email:
          type: string
          format: email
          example: user1@mail.com
        phone:
          type: string
          example: '79225551234'
    Trade:
      type: object
      properties:
        id:
          type: integer
          description: айди торга
        lotCount:
          type: integer
          description: количество лотов в торгах
        externalId:
          type: string
          description: номер торгов
        publishDate:
          type: string
          description: дата в формате Iso8601
        publishDateSmi:
          type: string
          description: дата в формате Iso8601
        publishDateEfir:
          type: string
          description: дата в формате Iso8601
        type:
          type: string
          description: тип аукциона
        priceOfferForm:
          type: string
          enum:
            - open
            - close
          description: тип предложения о цене
        eventTime:
          type: object
          properties:
            start:
              type: string
              description: дата и время начала торгов (null, если priceOfferForm = close)
            end:
              type: string
              description: дата и время окончания торгов (null, если priceOfferForm = close)
            result:
              type: string
              description: //Дата и время объявления результатов торгов (null, если priceOfferForm = open)
        applicationTime:
          type: object
          properties:
            start:
              type: string
              description: дата и время начала приема заявок
            end:
              type: string
              description: дата и время окончания приема заявок
        organizer:
          $ref: "#/components/schemas/BidderInfo"
        arbitrationManager:
          $ref: "#/components/schemas/BidderInfo"
        debtor:
          $ref: "#/components/schemas/BidderInfo"
        tradePlace:
          type: object
          properties:
            name:
              type: string
              description: название ЭТП
            site:
              type: string
              description: сайт ЭТП
    TradeInfo:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/LotShort'
        pagination:
          $ref: '#/components/schemas/Pagination'
    TradeShort:
      type: object
      properties:
        id:
          type: integer
          description: айди торга
        publishDate:
          type: string
          description: дата в формате Iso8601
        externalId:
          type: string
          description: номер торгов
        type:
          type: string
          description: тип аукциона
        lotCount:
          type: integer
          description: количество лотов в торгах
        eventTime:
          type: object
          properties:
            start:
              type: string
              description: дата и время начала торгов (null, если priceOfferForm = close)
            end:
              type: string
              description: дата и время окончания торгов (null, если priceOfferForm = close)
            result:
              type: string
              description: Дата и время объявления результатов торгов (null, если priceOfferForm = open)
        applicationTime:
          type: object
          properties:
            start:
              type: string
              description: дата и время начала приема заявок
            end:
              type: string
              description: дата и время окончания приема заявок
    LotShort:
      type: object
      properties:
        id:
          type: integer
          description: айди лота
        trade:
          $ref: '#/components/schemas/TradeShort'
        isWatched:
          type: boolean
          description: Просмотрено/не просмотрено
        categories:
          $ref: "#/components/schemas/Categories"
        isPinned:
          type: boolean
          description: закреплен/не закреплен
        inFavourites:
          type: boolean
          description: в избранном/нет
        favouritePaths:
          type: array
          items:
            $ref: "#/components/schemas/PathFavourite"
        isHide:
          type: boolean
          description: скрыт/не скрыт
        description:
          type: string
          description: описание лота
        state:
          type: string
          description: статус лота
        tradingNumber:
          type: string
          description: номер торгов
        lotNumber:
          type: string
          description: номер лота
        photos:
          $ref: "#/components/schemas/Images"
        location:
          type: string
          description: геометка (адрес у нас будет именно для лота, а не для торга)
        startPrice:
          type: number
          example: 0.00
        minPrice:
          type: number
          example: 0.00
        stepPrice:
          type: object
          properties:
            type:
              type: string
              enum:
                - rubles
                - percent
            value:
              type: number
              example: 0.00
        deposit:
          type: object
          properties:
            type:
              type: string
              enum:
                - rubles
                - percent
            value:
              type: number
              example: 0.00
        currentPrice:
          type: number
        currentPriceState:
          type: string
          enum:
            - up
            - hold
            - down
        descriptionExtracts:
          $ref: "#/components/schemas/DescriptionExtracts"
    Lot:
      type: object
      properties:
        id:
          type: integer
          description: айди лота
        trade:
          $ref: '#/components/schemas/Trade'
        isWatched:
          type: boolean
          description: Просмотрено/не просмотрено
        categories:
          $ref: "#/components/schemas/Categories"
        isPinned:
          type: boolean
          description: закреплен/не закреплен
        inFavourites:
          type: boolean
          description: в избранном/нет
        favouritePaths:
          type: array
          items:
            $ref: "#/components/schemas/PathFavourite"
        isHide:
          type: boolean
          description: скрыт/не скрыт
        description:
          type: string
          description: описание лота
        state:
          type: string
          description: статус лота
        tradingNumber:
          type: string
          description: номер торгов
        lotNumber:
          type: string
          description: номер лота
        photos:
          $ref: "#/components/schemas/Images"
        location:
          type: string
          description: геометка (адрес у нас будет именно для лота, а не для торга)
        startPrice:
          type: number
          example: 0.00
        stepPrice:
          type: object
          properties:
            type:
              type: string
              enum:
                - rubles
                - percent
            value:
              type: number
              example: 0.00
        deposit:
          type: object
          properties:
            type:
              type: string
              enum:
                - rubles
                - percent
            value:
              type: number
              example: 0.00
        priceReduction:
          type: array
          example:
            [ {
              "time": "string",
              "price": 0.0,
              "deposit": 0.0
            },{
              "time": "string",
              "price": 0.0,
              "deposit": 0.0
            } ]
          description: цена или сумма залога могут быть нулевыми
        currentPrice:
          type: number
        minPrice:
          type: number
          example: 0.00
        currentPriceState:
          type: string
          enum:
            - up
            - hold
            - down
        link:
          type: string
        efrsbLink:
          type: string
          description: ссылка на лот на федресурсе
        marks:
          $ref: "#/components/schemas/Marks"
        descriptionExtracts:
          $ref: "#/components/schemas/DescriptionExtracts"
        note:
          $ref: "#/components/schemas/Note"
    Pagination:
      type: object
      properties:
        count:
          type: integer
          description: количество выведенных записей
        perPage:
          type: integer
          description: количество записей на каждой странице
        currentPage:
          type: integer
          description: номер текущей страницы
        lastPage:
          type: integer
          description: номер последней страницы
        from:
          type: integer
          description: начало интервала
        to:
          type: integer
          description: конец интервала
        nextPageUrl:
          type: string
          description: ссылка на следующую страницу
        prevPageUrl:
          type: string
          description: ссылка на предыдущую страницу
    Debtor:
      required:
        - name
        - address
        - region
      type: object
      properties:
        name:
          type: string
          description: ФИО должника (физ.лица) или короткое название организации (юр. лица)
        inn:
          type: string
          description: ИНН (может быть нулевым)
        region:
          type: string
        address:
          type: string
        caseNumber:
          type: string
          description: номер судебного дела
        court:
          type: string
          description: суд
    arbitrationManager:
      required:
        - name
        - inn
      type: object
      properties:
        name:
          type: string
        inn:
          type: string
        sro:
          type: string
          description: название СРО
        sroINN:
          type: string
          description: ИНН СРО
        sroRegNum:
          type: string
          description: регистрационный номер СРО
    Error:
      required:
        - code
        - detail
        - title
      type: object
      properties:
        code:
          type: integer
          format: int32
        title:
          type: string
        detail:
          type: string
    ActionWithLot:
      required:
        - lot_id
        - type
      type: object
      properties:
        lot_id:
          type: integer
          description: Айдишник лота, который нужно добавить/удалить в/из "просмотрено", "скрыто", "закреплено"
        type:
          type: string
          enum:
            - seen
            - hidden
            - fixed
    BidderInfo:
      type: object
      properties:
        type:
          type: string
          enum:
            - person
            - company
        id:
          type: integer
        inn:
          type: string
        sroAU:
          type: string
          description: название объединения арбитражных управляющих
        phone:
          type: string
        email:
          type: string
        person:
          type: object
          properties:
            firstName:
              type: string
            middleName:
              type: string
            lastName:
              type: string
        company:
          type: object
          properties:
            shortName:
              type: string
            fullName:
              type: string

    Filters:
      type: object
      properties:
        sort:
          $ref: "#/components/schemas/Sort"
        categories:
          type: array
          default: null
          example: [ 'commercialRealEstate', 'land', 'obligations' ]
          items:
            type: string
            description: названия отмеченных категорий, если выбрана одна из главных категорий - присылать ее название и названия всех подкатегорий
        regions:
          type: array
          default: null
          example: [ 'MoscowCity', 'VoronezhRegion', 'KamchatkaKrai' ]
          items:
            type: string
            description: названия отмеченных регионов, если выбрана группа регионов - присылать все регионы этой группы
        prices:
          $ref: "#/components/schemas/Prices"
        dates:
          type: object
          default: null
          example: {
            eventTimeStart: {
              start: '23.06.2022',
              end: '23.08.2022'
            },
            eventTimeEnd: {
              start: '23.06.2022',
              end: '23.08.2022'
            },
            applicationTimeStart: {
              start: '23.06.2022',
              end: '23.08.2022'
            },
            applicationTimeEnd: {
              start: '23.06.2022',
              end: '23.08.2022'
            }
          }
          properties:
            eventTimeStart:
              type: object
              default: null
              properties:
                start:
                  type: string
                end:
                  type: string
            eventTimeEnd:
              type: object
              default: null
              properties:
                start:
                  type: string
                end:
                  type: string
            applicationTimeStart:
              type: object
              default: null
              properties:
                start:
                  type: string
                end:
                  type: string
            applicationTimeEnd:
              type: object
              default: null
              properties:
                start:
                  type: string
                end:
                  type: string
        extraOptions:
          type: object
          default: null
          example: {
            debtorCategories: [ 'SimplePerson', 'SimpleOrganization' ],
            debtors: [ 1, 2, 3 ],
            organizers: [ 1, 2, 3 ],
            arbitrationManagers: [ 1, 2, 3 ],
            other: {"period":"periodAll", "hasPhotos": false, "isHidden": false, "iStopped": false, "isCompleted": false}
          }
          properties:
            debtorCategories:
              type: array
              default: null
              items:
                type: string
                description: название категории должника
            debtors:
              type: array
              default: null
              example: [ 1, 2, 3 ]
              items:
                type: integer
                description: айдишники должников
            organizers:
              type: array
              default: null
              example: [ 1, 2, 3 ]
              items:
                type: integer
                description: айдишники организаторов торгов
            arbitrationManagers:
              type: array
              default: null
              example: [ 1, 2, 3 ]
              items:
                type: integer
                description: айдишники арбитражных управляющих
            other:
              type: object
              properties:
                period:
                  type: string
                  enum:
                    - periodAll
                    - periodDay
                    - periodWeek
                    - periodMonth
                  example: all
                hasPhotos:
                  type: boolean
                  example: false
                isStopped:
                  type: boolean
                  example: false
                isCompleted:
                  type: boolean
                  example: false
                isHidden:
                  type: boolean
                  example: false
        mainParams:
          type: object
          properties:
            excludedWords:
              type: string
              description: разделитель - запятая
              example: Машина, лот №1
            includedWords:
              type: string
              description: разделитель - запятая
              example: Машина, лот №1
            marks:
              type: array
              description: массив айдишников меток пользователя
            tradePlaces:
              type: array
              example: [ 1, 2, 3 ]
              description: массив айдишников торговых площадок
            tradeType:
              type: string
              enum:
                - OpenAuction
                - OpenConcours
                - PublicOffer
                - CloseAuction
                - CloseConcours
                - ClosePublicOffer
              description: вид торгов
    TradePlace:
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
    TradePlaces:
      type: array
      items:
        $ref: '#/components/schemas/TradePlace'
    PathFavourite:
      type: object
      required:
        - name
        - lotCount
      properties:
        name:
          type: string
          description: название папки
        pathId:
          type: integer
          description: айдишник папки (если редактируем папку, если создаем - передаем null)
        color:
          type: string
          description: название цвета папки
        lotCount:
          type: integer
          description: количество лотов в папке избранного
    ExcelParams:
      type: object
      properties:
        pathId:
          type: integer
          description: айдишник папки в избранном
        addTradeNumber:
          type: boolean
          default: false
        addEfrsbLink:
          type: boolean
          default: false
        addDescription:
          type: boolean
          default: false
        addCurrentPrice:
          type: boolean
          default: false
        addAuctionType:
          type: boolean
          default: false
        addDebtor:
          type: boolean
          default: false
        addArbitrationManager:
          type: boolean
          default: false
        addApplicationStart:
          type: boolean
          default: false
        addApplicationEnd:
          type: boolean
          default: false
        addWinner:
          type: boolean
          default: false
        addLotNumber:
          type: boolean
          default: false
        addTradePlace:
          type: boolean
          default: false
        addStartPrice:
          type: boolean
          default: false
        addMinPrice:
          type: boolean
          default: false
        addRegion:
          type: boolean
          default: false
        addOrganizer:
          type: boolean
          default: false
        addEventStart:
          type: boolean
          default: false
        addEventEnd:
          type: boolean
          default: false
        addNote:
          type: boolean
          default: false
    PathMonitoring:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: название папки
        pathId:
          type: integer
          description: айдишник папки (если редактируем папку, если создаем - передаем null)
        color:
          type: string
          description: название цвета папки
        notificationTime:
          type: string
          enum:
            - hourly
            - daily
            - weekly
        filters:
          $ref: "#/components/schemas/Filters"
    PathMonitoringData:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: название папки
        pathId:
          type: integer
          description: айдишник папки (если редактируем папку)
        color:
          type: string
          description: название цвета папки
        notificationTime:
          type: string
          enum:
            - hourly
            - daily
            - weekly
        filters:
          $ref: "#/components/schemas/Filters"
        newLotCount:
          type: integer
          description: количество новых лотов в папке за последний час

    Notification:
      required:
        - value
        - date
      type: object
      properties:
        value:
          type: string
          description: текст уведомления
        date:
          type: string
          description: дата уведомления
        lot:
          type: object
          properties:
            photos:
              $ref: "#/components/schemas/Images"
            description:
              type: string
        organizer:
          $ref: "#/components/schemas/BidderInfo"
    Notifications:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Notification"
        pagination:
          $ref: "#/components/schemas/Pagination"
        platformNotificationsCount:
          type: integer
          description: количество уведомлений от платформы
        favouriteNotificationsCount:
          type: integer
          description: количество уведомлений избранного
        monitoringNotificationsCount:
          type: integer
          description: количество уведомлений мониторинга
        organizersNotificationsCount:
          type: integer
          description: количество уведомлений от организаторов
    Marks:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            description: айдишник метки
          title:
            type: string
            description: значение метки
    Files:
      type: object
      properties:
        files:
          type: array
          items:
            type: string
        userFiles:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                description: айдишник файла на сервере
              url:
                type: string
                description: ссылка на файл
    File:
      required:
        - fileType
        - file
        - lotId
      type: object
      properties:
        fileType:
          type: string
          enum:
            - image
            - file
        file:
          type: string
          format: binary
          description: "Доступные расширения картинок - jpg,png,jpeg,bmp. На файлы нет ограничений"
        lotId:
          type: integer
    Categories:
      type: array
      items:
        type: object
        properties:
          label:
            type: string
            description: локализованное название категории
          key:
            type: string
            description: enum категорий
          subcategories:
            type: array
            items:
              type: object
              properties:
                label:
                  type: string
                key:
                  type: string
    Images:
      type: array
      items:
        type: object
        properties:
          type:
            type: string
            enum:
              - system
              - user
          preview:
            type: string
          main:
            type: string
          id:
            type: integer
    DescriptionExtracts:
      type: array
      items:
        type: object
        properties:
          type:
            type: string
            enum:
              - cadastralDataPrice
              - cadastralDataArea
              - cadastralDataFractionalOwnership
              - other
          title:
            type: string
            example: Кадастровый номер
          content:
            type: string
            example: 46:02:020301:169
    Sort:
      type: object
      properties:
        direction:
          type: string
          enum:
            - asc
            - desc
        type:
          type: string
          enum:
            - publishDate
            - currentPrice
            - eventStart
            - eventEnd
            - applicationStart
            - applicationEnd
    Regions:
      type: array
      items:
        type: object
        properties:
          regionGroup:
            type: string
            description: федеральный округ
          regions:
            type: array
            items:
              type: string
              description: enum регионов
    Prices:
      type: object
      example: {
        currentPrice:
          {
            min: 0,
            max: 100000
          },
        startPrice:
          {
            min: 0,
            max: 100000
          },
        minPrice:
          {
            min: 0,
            max: 100000
          },
        percentageReduction:
          {
            min: 0,
            max: 10
          }

      }
      properties:
        currentPrice:
          type: object
          default: null
          properties:
            max:
              type: number
              description: максимальная текущая цена лота
            min:
              type: number
              description: минимальная текущая цена лота
        startPrice:
          type: object
          default: null
          properties:
            max:
              type: number
              description: максимальная начальная цена лота
            min:
              type: number
              description: минимальная начальная цена лота
        minPrice:
          type: object
          default: null
          properties:
            max:
              type: number
              description: максимальная цена лота, если не задана - подать null
            min:
              type: number
              description: минимальная цена лота, если не задана - подать null
        percentageReduction:
          type: object
          default: null
          properties:
            max:
              type: number
              description: максимальный процент снижения
            min:
              type: number
              description: минимальный процент снижения
    AddNote:
      type: object
      properties:
        itemType:
          type: string
          enum:
            - lot
            - debtor
            - organizer
        itemId:
          type: integer
          description: айдишник должника/лота/организатора торгов
        title:
          type: string
          description: текст заметки
    Note:
      type: object
      properties:
        title:
          type: string
        date:
          type: string
          description: дата публикации/изменения заметки

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
